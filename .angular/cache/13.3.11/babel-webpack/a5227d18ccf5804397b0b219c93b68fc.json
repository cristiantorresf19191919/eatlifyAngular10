{"ast":null,"code":"import { forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, ChangeDetectorRef, Output, Input, ViewChild, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nconst _c0 = [\"inputfield\"];\n\nconst _c1 = function (a1) {\n  return {\n    \"ui-spinner-button ui-spinner-up ui-corner-tr ui-button ui-widget ui-state-default\": true,\n    \"ui-state-disabled\": a1\n  };\n};\n\nconst _c2 = function (a1) {\n  return {\n    \"ui-spinner-button ui-spinner-down ui-corner-br ui-button ui-widget ui-state-default\": true,\n    \"ui-state-disabled\": a1\n  };\n};\n\nconst SPINNER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => Spinner),\n  multi: true\n};\nlet Spinner = /*#__PURE__*/(() => {\n  class Spinner {\n    constructor(el, cd) {\n      this.el = el;\n      this.cd = cd;\n      this.onChange = new EventEmitter();\n      this.onFocus = new EventEmitter();\n      this.onBlur = new EventEmitter();\n      this._step = 1;\n\n      this.onModelChange = () => {};\n\n      this.onModelTouched = () => {};\n\n      this.keyPattern = /[0-9\\+\\-]/;\n      this.negativeSeparator = '-';\n    }\n\n    get step() {\n      return this._step;\n    }\n\n    set step(val) {\n      this._step = val;\n\n      if (this._step != null) {\n        let tokens = this.step.toString().split(/[,]|[.]/);\n        this.calculatedPrecision = tokens[1] ? tokens[1].length : undefined;\n      }\n    }\n\n    ngOnInit() {\n      if (this.formatInput) {\n        this.localeDecimalSeparator = 1.1.toLocaleString().substring(1, 2);\n        this.localeThousandSeparator = 1000 .toLocaleString().substring(1, 2);\n        this.thousandRegExp = new RegExp(`[${this.thousandSeparator || this.localeThousandSeparator}]`, 'gim');\n\n        if (this.decimalSeparator && this.thousandSeparator && this.decimalSeparator === this.thousandSeparator) {\n          console.warn(\"thousandSeparator and decimalSeparator cannot have the same value.\");\n        }\n      }\n    }\n\n    repeat(event, interval, dir) {\n      let i = interval || 500;\n      this.clearTimer();\n      this.timer = setTimeout(() => {\n        this.repeat(event, 40, dir);\n      }, i);\n      this.spin(event, dir);\n    }\n\n    spin(event, dir) {\n      let step = this.step * dir;\n      let currentValue;\n      let precision = this.getPrecision();\n      if (this.value) currentValue = typeof this.value === 'string' ? this.parseValue(this.value) : this.value;else currentValue = 0;\n      if (precision) this.value = parseFloat(this.toFixed(currentValue + step, precision));else this.value = currentValue + step;\n\n      if (this.maxlength !== undefined && this.value.toString().length > this.maxlength) {\n        this.value = currentValue;\n      }\n\n      if (this.min !== undefined && this.value < this.min) {\n        this.value = this.min;\n      }\n\n      if (this.max !== undefined && this.value > this.max) {\n        this.value = this.max;\n      }\n\n      this.formatValue();\n      this.onModelChange(this.value);\n      this.onChange.emit(event);\n    }\n\n    getPrecision() {\n      return this.precision === undefined ? this.calculatedPrecision : this.precision;\n    }\n\n    toFixed(value, precision) {\n      let power = Math.pow(10, precision || 0);\n      return String(Math.round(value * power) / power);\n    }\n\n    onUpButtonMousedown(event) {\n      if (!this.disabled) {\n        this.inputfieldViewChild.nativeElement.focus();\n        this.repeat(event, null, 1);\n        this.updateFilledState();\n        event.preventDefault();\n      }\n    }\n\n    onUpButtonMouseup(event) {\n      if (!this.disabled) {\n        this.clearTimer();\n      }\n    }\n\n    onUpButtonMouseleave(event) {\n      if (!this.disabled) {\n        this.clearTimer();\n      }\n    }\n\n    onDownButtonMousedown(event) {\n      if (!this.disabled) {\n        this.inputfieldViewChild.nativeElement.focus();\n        this.repeat(event, null, -1);\n        this.updateFilledState();\n        event.preventDefault();\n      }\n    }\n\n    onDownButtonMouseup(event) {\n      if (!this.disabled) {\n        this.clearTimer();\n      }\n    }\n\n    onDownButtonMouseleave(event) {\n      if (!this.disabled) {\n        this.clearTimer();\n      }\n    }\n\n    onInputKeydown(event) {\n      if (event.which == 38) {\n        this.spin(event, 1);\n        event.preventDefault();\n      } else if (event.which == 40) {\n        this.spin(event, -1);\n        event.preventDefault();\n      }\n    }\n\n    onInputChange(event) {\n      this.onChange.emit(event);\n    }\n\n    onInput(event) {\n      this.value = this.parseValue(event.target.value);\n      this.onModelChange(this.value);\n      this.updateFilledState();\n    }\n\n    onInputBlur(event) {\n      this.focus = false;\n      this.formatValue();\n      this.onModelTouched();\n      this.onBlur.emit(event);\n    }\n\n    onInputFocus(event) {\n      this.focus = true;\n      this.onFocus.emit(event);\n    }\n\n    parseValue(val) {\n      let value;\n      let precision = this.getPrecision();\n\n      if (val.trim() === '') {\n        value = null;\n      } else {\n        if (this.formatInput) {\n          val = val.replace(this.thousandRegExp, '');\n        }\n\n        if (precision) {\n          val = this.formatInput ? val.replace(this.decimalSeparator || this.localeDecimalSeparator, '.') : val.replace(',', '.');\n          value = parseFloat(val);\n        } else {\n          value = parseInt(val, 10);\n        }\n\n        if (!isNaN(value)) {\n          if (this.max !== null && value > this.max) {\n            value = this.max;\n          }\n\n          if (this.min !== null && value < this.min) {\n            value = this.min;\n          }\n        } else {\n          value = null;\n        }\n      }\n\n      return value;\n    }\n\n    formatValue() {\n      let value = this.value;\n      let precision = this.getPrecision();\n\n      if (value != null) {\n        if (this.formatInput) {\n          value = value.toLocaleString(undefined, {\n            maximumFractionDigits: 20\n          });\n\n          if (this.decimalSeparator && this.thousandSeparator) {\n            value = value.split(this.localeDecimalSeparator);\n\n            if (precision && value[1]) {\n              value[1] = (this.decimalSeparator || this.localeDecimalSeparator) + value[1];\n            }\n\n            if (this.thousandSeparator && value[0].length > 3) {\n              value[0] = value[0].replace(new RegExp(`[${this.localeThousandSeparator}]`, 'gim'), this.thousandSeparator);\n            }\n\n            value = value.join('');\n          }\n        }\n\n        this.formattedValue = value.toString();\n      } else {\n        this.formattedValue = null;\n      }\n\n      if (this.inputfieldViewChild && this.inputfieldViewChild.nativeElement) {\n        this.inputfieldViewChild.nativeElement.value = this.formattedValue;\n      }\n    }\n\n    clearTimer() {\n      if (this.timer) {\n        clearInterval(this.timer);\n      }\n    }\n\n    writeValue(value) {\n      this.value = value;\n      this.formatValue();\n      this.updateFilledState();\n      this.cd.markForCheck();\n    }\n\n    registerOnChange(fn) {\n      this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.onModelTouched = fn;\n    }\n\n    setDisabledState(val) {\n      this.disabled = val;\n      this.cd.markForCheck();\n    }\n\n    updateFilledState() {\n      this.filled = this.value !== undefined && this.value != null;\n    }\n\n  }\n\n  Spinner.ɵfac = function Spinner_Factory(t) {\n    return new (t || Spinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  Spinner.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: Spinner,\n    selectors: [[\"p-spinner\"]],\n    viewQuery: function Spinner_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputfieldViewChild = _t.first);\n      }\n    },\n    hostVars: 4,\n    hostBindings: function Spinner_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ui-inputwrapper-filled\", ctx.filled)(\"ui-inputwrapper-focus\", ctx.focus);\n      }\n    },\n    inputs: {\n      step: \"step\",\n      disabled: \"disabled\",\n      min: \"min\",\n      max: \"max\",\n      maxlength: \"maxlength\",\n      size: \"size\",\n      placeholder: \"placeholder\",\n      inputId: \"inputId\",\n      readonly: \"readonly\",\n      tabindex: \"tabindex\",\n      required: \"required\",\n      name: \"name\",\n      ariaLabelledBy: \"ariaLabelledBy\",\n      inputStyle: \"inputStyle\",\n      inputStyleClass: \"inputStyleClass\",\n      formatInput: \"formatInput\",\n      decimalSeparator: \"decimalSeparator\",\n      thousandSeparator: \"thousandSeparator\",\n      precision: \"precision\"\n    },\n    outputs: {\n      onChange: \"onChange\",\n      onFocus: \"onFocus\",\n      onBlur: \"onBlur\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([SPINNER_VALUE_ACCESSOR])],\n    decls: 7,\n    vars: 28,\n    consts: [[1, \"ui-spinner\", \"ui-widget\", \"ui-corner-all\"], [\"type\", \"text\", 3, \"value\", \"disabled\", \"readonly\", \"ngStyle\", \"ngClass\", \"keydown\", \"blur\", \"input\", \"change\", \"focus\"], [\"inputfield\", \"\"], [\"type\", \"button\", \"tabindex\", \"-1\", 3, \"ngClass\", \"disabled\", \"mouseleave\", \"mousedown\", \"mouseup\"], [1, \"ui-spinner-button-icon\", \"pi\", \"pi-caret-up\", \"ui-clickable\"], [1, \"ui-spinner-button-icon\", \"pi\", \"pi-caret-down\", \"ui-clickable\"]],\n    template: function Spinner_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"span\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"input\", 1, 2);\n        ɵngcc0.ɵɵlistener(\"keydown\", function Spinner_Template_input_keydown_1_listener($event) {\n          return ctx.onInputKeydown($event);\n        })(\"blur\", function Spinner_Template_input_blur_1_listener($event) {\n          return ctx.onInputBlur($event);\n        })(\"input\", function Spinner_Template_input_input_1_listener($event) {\n          return ctx.onInput($event);\n        })(\"change\", function Spinner_Template_input_change_1_listener($event) {\n          return ctx.onInputChange($event);\n        })(\"focus\", function Spinner_Template_input_focus_1_listener($event) {\n          return ctx.onInputFocus($event);\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(3, \"button\", 3);\n        ɵngcc0.ɵɵlistener(\"mouseleave\", function Spinner_Template_button_mouseleave_3_listener($event) {\n          return ctx.onUpButtonMouseleave($event);\n        })(\"mousedown\", function Spinner_Template_button_mousedown_3_listener($event) {\n          return ctx.onUpButtonMousedown($event);\n        })(\"mouseup\", function Spinner_Template_button_mouseup_3_listener($event) {\n          return ctx.onUpButtonMouseup($event);\n        });\n        ɵngcc0.ɵɵelement(4, \"span\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"button\", 3);\n        ɵngcc0.ɵɵlistener(\"mouseleave\", function Spinner_Template_button_mouseleave_5_listener($event) {\n          return ctx.onDownButtonMouseleave($event);\n        })(\"mousedown\", function Spinner_Template_button_mousedown_5_listener($event) {\n          return ctx.onDownButtonMousedown($event);\n        })(\"mouseup\", function Spinner_Template_button_mouseup_5_listener($event) {\n          return ctx.onDownButtonMouseup($event);\n        });\n        ɵngcc0.ɵɵelement(6, \"span\", 5);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵclassMap(ctx.inputStyleClass);\n        ɵngcc0.ɵɵproperty(\"value\", ctx.formattedValue || null)(\"disabled\", ctx.disabled)(\"readonly\", ctx.readonly)(\"ngStyle\", ctx.inputStyle)(\"ngClass\", \"ui-spinner-input ui-inputtext ui-widget ui-state-default ui-corner-all\");\n        ɵngcc0.ɵɵattribute(\"id\", ctx.inputId)(\"name\", ctx.name)(\"aria-valumin\", ctx.min)(\"aria-valuemax\", ctx.max)(\"aria-valuenow\", ctx.value)(\"aria-labelledby\", ctx.ariaLabelledBy)(\"size\", ctx.size)(\"maxlength\", ctx.maxlength)(\"tabindex\", ctx.tabindex)(\"placeholder\", ctx.placeholder)(\"required\", ctx.required);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(24, _c1, ctx.disabled))(\"disabled\", ctx.disabled || ctx.readonly);\n        ɵngcc0.ɵɵattribute(\"readonly\", ctx.readonly);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(26, _c2, ctx.disabled))(\"disabled\", ctx.disabled || ctx.readonly);\n        ɵngcc0.ɵɵattribute(\"readonly\", ctx.readonly);\n      }\n    },\n    directives: [ɵngcc1.NgStyle, ɵngcc1.NgClass],\n    styles: [\".ui-spinner{display:inline-block;overflow:visible;padding:0;position:relative;vertical-align:middle}.ui-spinner-input{padding-right:1.5em;vertical-align:middle}.ui-spinner-button{cursor:default;display:block;height:50%;margin:0;overflow:hidden;padding:0;position:absolute;right:0;text-align:center;vertical-align:middle;width:1.5em}.ui-spinner .ui-spinner-button-icon{left:50%;margin-left:-.5em;margin-top:-.5em;position:absolute;top:50%;width:1em}.ui-spinner-up{top:0}.ui-spinner-down{bottom:0}.ui-fluid .ui-spinner{width:100%}.ui-fluid .ui-spinner .ui-spinner-input{padding-right:2em;width:100%}.ui-fluid .ui-spinner .ui-spinner-button{width:1.5em}.ui-fluid .ui-spinner .ui-spinner-button .ui-spinner-button-icon{left:.7em}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return Spinner;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet SpinnerModule = /*#__PURE__*/(() => {\n  class SpinnerModule {}\n\n  SpinnerModule.ɵfac = function SpinnerModule_Factory(t) {\n    return new (t || SpinnerModule)();\n  };\n\n  SpinnerModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: SpinnerModule\n  });\n  SpinnerModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, InputTextModule]]\n  });\n  return SpinnerModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SpinnerModule, {\n    declarations: function () {\n      return [Spinner];\n    },\n    imports: function () {\n      return [CommonModule, InputTextModule];\n    },\n    exports: function () {\n      return [Spinner];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { SPINNER_VALUE_ACCESSOR, Spinner, SpinnerModule }; //# sourceMappingURL=primeng-spinner.js.map","map":null,"metadata":{},"sourceType":"module"}