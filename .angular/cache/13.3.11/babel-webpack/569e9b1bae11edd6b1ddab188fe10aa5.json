{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { catchError, delay } from \"rxjs/operators\";\nimport { throwError } from \"rxjs\";\nimport { GLOBAL } from './url';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    \"Content-Type\": \"application/json\"\n  })\n};\nexport let CajerosService = /*#__PURE__*/(() => {\n  class CajerosService {\n    constructor(httpClient, router) {\n      this.httpClient = httpClient;\n      this.router = router; // pilas no se le olvide cambiar las urls despues\n      // private url = \"http://localhost:5000\";\n\n      this.url = GLOBAL.url;\n    }\n\n    handleError(error) {\n      console.log('*********************************************');\n      console.log('*********************************************');\n      console.log('*********************************************');\n      console.log('*********************************************');\n\n      if (error.error instanceof ErrorEvent) {\n        // A client-side or network error occurred. Handle it accordingly.\n        console.error('An error occurred:', error.error.message);\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong,\n        console.error(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);\n      } // return an observable with a user-facing error message\n\n\n      return throwError('Something bad happened; please try again later.');\n    }\n\n    Registro(user) {\n      return this.httpClient.post(`${this.url}/registrounico`, user, httpOptions);\n    }\n\n    loginCajero(user) {\n      return this.httpClient.post(`${this.url}/cajeros/loginCajero`, user, httpOptions);\n    }\n\n    AgregarCajero(cajero) {\n      return this.httpClient.post(`${this.url}/cajeros/agregarCajero`, cajero, httpOptions);\n    }\n\n    ComparaEmail(correo) {\n      return this.httpClient.get(`${this.url}/cajeros/compareEmail?email=${correo}`).pipe(delay(400));\n    }\n\n    guardeUsuario(usuario) {\n      localStorage.setItem(\"name\", usuario.name);\n      if (usuario.admin) localStorage.setItem(\"admin\", \"admin\");\n    }\n\n    getCajero() {\n      return this.usuario;\n    }\n\n    verCajeros() {\n      return this.httpClient.get(`${this.url}/cajeros/verCajero`);\n    }\n\n    deleteCajero(cajeroId) {\n      return this.httpClient.delete(`${this.url}/cajeros/eliminarCajero/${cajeroId}`, httpOptions);\n    }\n\n    updateUser(user) {\n      return this.httpClient.put(`${this.url}/cajeros/actualizarCajero/${user._id}`, user, httpOptions);\n    }\n\n    getRestaurants() {\n      return this.httpClient.get(`${this.url}/restaurante`, httpOptions);\n    }\n\n    postRestaurants(restaurante) {\n      return this.httpClient.post(`${this.url}/restaurante`, restaurante, httpOptions).pipe(catchError(this.handleError));\n    }\n\n    updateRestaurante(restaurante) {\n      return this.httpClient.put(`${this.url}/restaurante`, restaurante, httpOptions).pipe(catchError(this.handleError));\n    }\n\n    storeUserData(token, usuario, usuarioId) {\n      localStorage.setItem(\"token\", token);\n      localStorage.setItem(\"user\", usuario);\n      localStorage.setItem(\"userId\", usuarioId);\n      this.authToken = token;\n      this.user = usuario;\n    }\n\n    getUser() {\n      return this.user;\n    }\n\n    logout() {\n      localStorage.clear();\n    }\n\n  }\n\n  CajerosService.ɵfac = function CajerosService_Factory(t) {\n    return new (t || CajerosService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  CajerosService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CajerosService,\n    factory: CajerosService.ɵfac,\n    providedIn: 'root'\n  });\n  return CajerosService;\n})();","map":null,"metadata":{},"sourceType":"module"}