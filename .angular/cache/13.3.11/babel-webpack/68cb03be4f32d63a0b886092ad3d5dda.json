{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { GLOBAL } from './url';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport let ProductosService = /*#__PURE__*/(() => {\n  class ProductosService {\n    constructor(httpClient, router) {\n      this.httpClient = httpClient;\n      this.router = router;\n      this.url = GLOBAL + \"/products\";\n      this.url = GLOBAL + \"/products\";\n    }\n\n    handleError(error) {\n      console.log('*********************************************');\n      console.log('*********************************************');\n      console.log('*********************************************');\n      console.log('*********************************************');\n\n      if (error.error instanceof ErrorEvent) {\n        // A client-side or network error occurred. Handle it accordingly.\n        console.error('An error occurred:', error.error.message);\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong,\n        console.error(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);\n      } // return an observable with a user-facing error message\n\n\n      return throwError('Something bad happened; please try again later.');\n    }\n\n    addProduct(product) {\n      return this.httpClient.post(GLOBAL.url + '/products', product, httpOptions);\n    }\n\n    getProducts() {\n      return this.httpClient.get(GLOBAL.url + '/products', httpOptions);\n    }\n\n    getAddonsProducts() {\n      return this.httpClient.get(GLOBAL.url + '/products/addons', httpOptions);\n    }\n\n    getProductById(id) {\n      return this.httpClient.get(GLOBAL.url + \"/products/\" + id);\n    }\n\n    UpdateProduct(product) {\n      return this.httpClient.put(`${GLOBAL.url + '/products'}/${product._id}`, product, httpOptions);\n    }\n\n    DeleteProduct(product) {\n      return this.httpClient.delete(`${GLOBAL.url + '/products'}/${product._id}`, httpOptions);\n    }\n\n  }\n\n  ProductosService.ɵfac = function ProductosService_Factory(t) {\n    return new (t || ProductosService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  ProductosService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductosService,\n    factory: ProductosService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProductosService;\n})();","map":null,"metadata":{},"sourceType":"module"}