{"ast":null,"code":"import { forwardRef, EventEmitter, Component, ViewEncapsulation, Input, Output, ChangeDetectionStrategy, ElementRef, Renderer2, ChangeDetectorRef, ViewChild, ContentChild, ContentChildren, NgModule } from '@angular/core';\nimport { trigger, transition, style, animate } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport { DomHandler, ConnectedOverlayScrollHandler } from 'primeng/dom';\nimport { ObjectUtils, FilterUtils } from 'primeng/utils';\nimport { Footer, Header, PrimeTemplate, SharedModule } from 'primeng/api';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TooltipModule } from 'primeng/tooltip';\nimport { RippleModule } from 'primeng/ripple';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from 'primeng/tooltip';\nimport * as ɵngcc3 from 'primeng/ripple';\nimport * as ɵngcc4 from '@angular/cdk/scrolling';\n\nfunction MultiSelectItem_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.option.label);\n  }\n}\n\nfunction MultiSelectItem_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    \"height\": a0\n  };\n};\n\nconst _c1 = function (a0, a1) {\n  return {\n    \"p-highlight\": a0,\n    \"p-disabled\": a1\n  };\n};\n\nconst _c2 = function (a0) {\n  return {\n    \"p-highlight\": a0\n  };\n};\n\nconst _c3 = function (a0) {\n  return {\n    \"pi pi-check\": a0\n  };\n};\n\nconst _c4 = function (a0) {\n  return {\n    $implicit: a0\n  };\n};\n\nconst _c5 = [\"container\"];\nconst _c6 = [\"filterInput\"];\nconst _c7 = [\"in\"];\n\nfunction MultiSelect_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.valuesAsString || \"empty\");\n  }\n}\n\nfunction MultiSelect_ng_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction MultiSelect_div_11_div_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nconst _c8 = function (a0, a1) {\n  return {\n    \"p-highlight\": a0,\n    \"p-focus\": a1\n  };\n};\n\nfunction MultiSelect_div_11_div_1_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 26);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 2);\n    ɵngcc0.ɵɵelementStart(2, \"input\", 27);\n    ɵngcc0.ɵɵlistener(\"focus\", function MultiSelect_div_11_div_1_div_3_Template_input_focus_2_listener() {\n      ɵngcc0.ɵɵrestoreView(_r15);\n      const ctx_r14 = ɵngcc0.ɵɵnextContext(3);\n      return ctx_r14.onHeaderCheckboxFocus();\n    })(\"blur\", function MultiSelect_div_11_div_1_div_3_Template_input_blur_2_listener() {\n      ɵngcc0.ɵɵrestoreView(_r15);\n      const ctx_r16 = ɵngcc0.ɵɵnextContext(3);\n      return ctx_r16.onHeaderCheckboxBlur();\n    })(\"keydown.space\", function MultiSelect_div_11_div_1_div_3_Template_input_keydown_space_2_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r15);\n      const ctx_r17 = ɵngcc0.ɵɵnextContext(3);\n      return ctx_r17.toggleAll($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(3, \"div\", 28);\n    ɵngcc0.ɵɵlistener(\"click\", function MultiSelect_div_11_div_1_div_3_Template_div_click_3_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r15);\n      const ctx_r18 = ɵngcc0.ɵɵnextContext(3);\n      return ctx_r18.toggleAll($event);\n    });\n    ɵngcc0.ɵɵelement(4, \"span\", 29);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r12 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"checked\", ctx_r12.isAllChecked());\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(4, _c8, ctx_r12.isAllChecked(), ctx_r12.headerCheckboxFocus));\n    ɵngcc0.ɵɵattribute(\"aria-checked\", ctx_r12.isAllChecked());\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(7, _c3, ctx_r12.isAllChecked()));\n  }\n}\n\nfunction MultiSelect_div_11_div_1_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 30);\n    ɵngcc0.ɵɵelementStart(1, \"input\", 31, 32);\n    ɵngcc0.ɵɵlistener(\"input\", function MultiSelect_div_11_div_1_div_4_Template_input_input_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r21);\n      const ctx_r20 = ɵngcc0.ɵɵnextContext(3);\n      return ctx_r20.onFilter();\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelement(3, \"span\", 33);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r13 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"value\", ctx_r13.filterValue || \"\");\n    ɵngcc0.ɵɵattribute(\"placeholder\", ctx_r13.filterPlaceHolder)(\"aria-label\", ctx_r13.ariaFilterLabel);\n  }\n}\n\nfunction MultiSelect_div_11_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 20);\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵtemplate(2, MultiSelect_div_11_div_1_ng_container_2_Template, 1, 0, \"ng-container\", 21);\n    ɵngcc0.ɵɵtemplate(3, MultiSelect_div_11_div_1_div_3_Template, 5, 9, \"div\", 22);\n    ɵngcc0.ɵɵtemplate(4, MultiSelect_div_11_div_1_div_4_Template, 4, 3, \"div\", 23);\n    ɵngcc0.ɵɵelementStart(5, \"button\", 24);\n    ɵngcc0.ɵɵlistener(\"click\", function MultiSelect_div_11_div_1_Template_button_click_5_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r23);\n      const ctx_r22 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r22.close($event);\n    });\n    ɵngcc0.ɵɵelement(6, \"span\", 25);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r5.headerTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r5.showToggleAll && !ctx_r5.selectionLimit);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r5.filter);\n  }\n}\n\nfunction MultiSelect_div_11_ng_container_4_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r28 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"p-multiSelectItem\", 35);\n    ɵngcc0.ɵɵlistener(\"onClick\", function MultiSelect_div_11_ng_container_4_ng_template_1_Template_p_multiSelectItem_onClick_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r28);\n      const ctx_r27 = ɵngcc0.ɵɵnextContext(3);\n      return ctx_r27.onOptionClick($event);\n    })(\"onKeydown\", function MultiSelect_div_11_ng_container_4_ng_template_1_Template_p_multiSelectItem_onKeydown_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r28);\n      const ctx_r29 = ɵngcc0.ɵɵnextContext(3);\n      return ctx_r29.onOptionKeydown($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r25 = ctx.$implicit;\n    const ctx_r24 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵproperty(\"option\", option_r25)(\"selected\", ctx_r24.isSelected(option_r25.value))(\"maxSelectionLimitReached\", ctx_r24.maxSelectionLimitReached)(\"template\", ctx_r24.itemTemplate);\n  }\n}\n\nfunction MultiSelect_div_11_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, MultiSelect_div_11_ng_container_4_ng_template_1_Template, 1, 4, \"ng-template\", 34);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r6.visibleOptions);\n  }\n}\n\nfunction MultiSelect_div_11_ng_template_5_cdk_virtual_scroll_viewport_0_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r41 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"p-multiSelectItem\", 40);\n    ɵngcc0.ɵɵlistener(\"onClick\", function MultiSelect_div_11_ng_template_5_cdk_virtual_scroll_viewport_0_ng_container_2_Template_p_multiSelectItem_onClick_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r41);\n      const ctx_r40 = ɵngcc0.ɵɵnextContext(4);\n      return ctx_r40.onOptionClick($event);\n    })(\"onKeydown\", function MultiSelect_div_11_ng_template_5_cdk_virtual_scroll_viewport_0_ng_container_2_Template_p_multiSelectItem_onKeydown_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r41);\n      const ctx_r42 = ɵngcc0.ɵɵnextContext(4);\n      return ctx_r42.onOptionKeydown($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const option_r33 = ctx.$implicit;\n    const ctx_r32 = ɵngcc0.ɵɵnextContext(4);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"option\", option_r33)(\"selected\", ctx_r32.isSelected(option_r33.value))(\"maxSelectionLimitReached\", ctx_r32.maxSelectionLimitReached)(\"template\", ctx_r32.itemTemplate)(\"itemSize\", ctx_r32.itemSize);\n  }\n}\n\nfunction MultiSelect_div_11_ng_template_5_cdk_virtual_scroll_viewport_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"cdk-virtual-scroll-viewport\", 37, 38);\n    ɵngcc0.ɵɵtemplate(2, MultiSelect_div_11_ng_template_5_cdk_virtual_scroll_viewport_0_ng_container_2_Template, 2, 5, \"ng-container\", 39);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r30 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction1(3, _c0, ctx_r30.scrollHeight))(\"itemSize\", ctx_r30.itemSize);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"cdkVirtualForOf\", ctx_r30.visibleOptions);\n  }\n}\n\nfunction MultiSelect_div_11_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, MultiSelect_div_11_ng_template_5_cdk_virtual_scroll_viewport_0_Template, 3, 5, \"cdk-virtual-scroll-viewport\", 36);\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r8.virtualScroll && ctx_r8.visibleOptions && ctx_r8.visibleOptions.length);\n  }\n}\n\nfunction MultiSelect_div_11_li_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"li\", 41);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r9 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r9.emptyFilterMessage);\n  }\n}\n\nfunction MultiSelect_div_11_div_8_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction MultiSelect_div_11_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 42);\n    ɵngcc0.ɵɵprojection(1, 1);\n    ɵngcc0.ɵɵtemplate(2, MultiSelect_div_11_div_8_ng_container_2_Template, 1, 0, \"ng-container\", 21);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r10.footerTemplate);\n  }\n}\n\nconst _c9 = function () {\n  return [\"p-multiselect-panel p-component\"];\n};\n\nconst _c10 = function (a0, a1) {\n  return {\n    showTransitionParams: a0,\n    hideTransitionParams: a1\n  };\n};\n\nconst _c11 = function (a1) {\n  return {\n    value: \"visible\",\n    params: a1\n  };\n};\n\nfunction MultiSelect_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r45 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 12);\n    ɵngcc0.ɵɵlistener(\"@overlayAnimation.start\", function MultiSelect_div_11_Template_div_animation_overlayAnimation_start_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r45);\n      const ctx_r44 = ɵngcc0.ɵɵnextContext();\n      return ctx_r44.onOverlayAnimationStart($event);\n    })(\"keydown\", function MultiSelect_div_11_Template_div_keydown_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r45);\n      const ctx_r46 = ɵngcc0.ɵɵnextContext();\n      return ctx_r46.onKeydown($event);\n    });\n    ɵngcc0.ɵɵtemplate(1, MultiSelect_div_11_div_1_Template, 7, 3, \"div\", 13);\n    ɵngcc0.ɵɵelementStart(2, \"div\", 14);\n    ɵngcc0.ɵɵelementStart(3, \"ul\", 15);\n    ɵngcc0.ɵɵtemplate(4, MultiSelect_div_11_ng_container_4_Template, 2, 1, \"ng-container\", 16);\n    ɵngcc0.ɵɵtemplate(5, MultiSelect_div_11_ng_template_5_Template, 1, 1, \"ng-template\", null, 17, ɵngcc0.ɵɵtemplateRefExtractor);\n    ɵngcc0.ɵɵtemplate(7, MultiSelect_div_11_li_7_Template, 2, 1, \"li\", 18);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(8, MultiSelect_div_11_div_8_Template, 3, 1, \"div\", 19);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _r7 = ɵngcc0.ɵɵreference(6);\n\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassMap(ctx_r4.panelStyleClass);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction0(12, _c9))(\"@overlayAnimation\", ɵngcc0.ɵɵpureFunction1(16, _c11, ɵngcc0.ɵɵpureFunction2(13, _c10, ctx_r4.showTransitionOptions, ctx_r4.hideTransitionOptions)))(\"ngStyle\", ctx_r4.panelStyle);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r4.showHeader);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"max-height\", ctx_r4.virtualScroll ? \"auto\" : ctx_r4.scrollHeight || \"auto\");\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r4.virtualScroll)(\"ngIfElse\", _r7);\n    ɵngcc0.ɵɵadvance(3);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r4.filter && ctx_r4.visibleOptions && ctx_r4.visibleOptions.length === 0);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r4.footerFacet || ctx_r4.footerTemplate);\n  }\n}\n\nconst _c12 = [[[\"p-header\"]], [[\"p-footer\"]]];\n\nconst _c13 = function (a1, a2, a3) {\n  return {\n    \"p-multiselect p-component\": true,\n    \"p-multiselect-open\": a1,\n    \"p-focus\": a2,\n    \"p-disabled\": a3\n  };\n};\n\nconst _c14 = function (a0, a1) {\n  return {\n    \"p-placeholder\": a0,\n    \"p-multiselect-label-empty\": a1\n  };\n};\n\nconst _c15 = function () {\n  return {\n    \"p-multiselect-trigger\": true\n  };\n};\n\nconst _c16 = [\"p-header\", \"p-footer\"];\nconst MULTISELECT_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MultiSelect),\n  multi: true\n};\nlet MultiSelectItem = /*#__PURE__*/(() => {\n  class MultiSelectItem {\n    constructor() {\n      this.onClick = new EventEmitter();\n      this.onKeydown = new EventEmitter();\n    }\n\n    onOptionClick(event) {\n      this.onClick.emit({\n        originalEvent: event,\n        option: this.option\n      });\n    }\n\n    onOptionKeydown(event) {\n      this.onKeydown.emit({\n        originalEvent: event,\n        option: this.option\n      });\n    }\n\n  }\n\n  MultiSelectItem.ɵfac = function MultiSelectItem_Factory(t) {\n    return new (t || MultiSelectItem)();\n  };\n\n  MultiSelectItem.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MultiSelectItem,\n    selectors: [[\"p-multiSelectItem\"]],\n    inputs: {\n      option: \"option\",\n      selected: \"selected\",\n      disabled: \"disabled\",\n      itemSize: \"itemSize\",\n      template: \"template\",\n      maxSelectionLimitReached: \"maxSelectionLimitReached\"\n    },\n    outputs: {\n      onClick: \"onClick\",\n      onKeydown: \"onKeydown\"\n    },\n    decls: 6,\n    vars: 20,\n    consts: [[1, \"p-multiselect-item\", 3, \"ngStyle\", \"ngClass\", \"click\", \"keydown\"], [1, \"p-checkbox\", \"p-component\"], [1, \"p-checkbox-box\", 3, \"ngClass\"], [1, \"p-checkbox-icon\", 3, \"ngClass\"], [4, \"ngIf\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n    template: function MultiSelectItem_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"li\", 0);\n        ɵngcc0.ɵɵlistener(\"click\", function MultiSelectItem_Template_li_click_0_listener($event) {\n          return ctx.onOptionClick($event);\n        })(\"keydown\", function MultiSelectItem_Template_li_keydown_0_listener($event) {\n          return ctx.onOptionKeydown($event);\n        });\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵelement(3, \"span\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(4, MultiSelectItem_span_4_Template, 2, 1, \"span\", 4);\n        ɵngcc0.ɵɵtemplate(5, MultiSelectItem_ng_container_5_Template, 1, 0, \"ng-container\", 5);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction1(9, _c0, ctx.itemSize + \"px\"))(\"ngClass\", ɵngcc0.ɵɵpureFunction2(11, _c1, ctx.selected, ctx.option.disabled || ctx.maxSelectionLimitReached && !ctx.selected));\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.option.label)(\"tabindex\", ctx.option.disabled ? null : \"0\");\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(14, _c2, ctx.selected));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(16, _c3, ctx.selected));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.template);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.template)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(18, _c4, ctx.option));\n      }\n    },\n    directives: [ɵngcc1.NgStyle, ɵngcc1.NgClass, ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet],\n    encapsulation: 2\n  });\n  return MultiSelectItem;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MultiSelect = /*#__PURE__*/(() => {\n  class MultiSelect {\n    constructor(el, renderer, cd) {\n      this.el = el;\n      this.renderer = renderer;\n      this.cd = cd;\n      this.scrollHeight = '200px';\n      this.filter = true;\n      this.displaySelectedLabel = true;\n      this.maxSelectedLabels = 3;\n      this.selectedItemsLabel = '{0} items selected';\n      this.showToggleAll = true;\n      this.emptyFilterMessage = 'No results found';\n      this.resetFilterOnHide = false;\n      this.dropdownIcon = 'pi pi-chevron-down';\n      this.showHeader = true;\n      this.autoZIndex = true;\n      this.baseZIndex = 0;\n      this.filterBy = 'label';\n      this.showTransitionOptions = '.12s cubic-bezier(0, 0, 0.2, 1)';\n      this.hideTransitionOptions = '.1s linear';\n      this.filterMatchMode = \"contains\";\n      this.tooltip = '';\n      this.tooltipPosition = 'right';\n      this.tooltipPositionStyle = 'absolute';\n      this.autofocusFilter = true;\n      this.onChange = new EventEmitter();\n      this.onFocus = new EventEmitter();\n      this.onBlur = new EventEmitter();\n      this.onClick = new EventEmitter();\n      this.onPanelShow = new EventEmitter();\n      this.onPanelHide = new EventEmitter();\n\n      this.onModelChange = () => {};\n\n      this.onModelTouched = () => {};\n\n      this.disabledSelectedOptions = [];\n    }\n\n    set defaultLabel(val) {\n      this._defaultLabel = val;\n      this.updateLabel();\n    }\n\n    get defaultLabel() {\n      return this._defaultLabel;\n    }\n\n    set placeholder(val) {\n      this._placeholder = val;\n      this.updateLabel();\n    }\n\n    get placeholder() {\n      return this._placeholder;\n    }\n\n    get options() {\n      return this._options;\n    }\n\n    set options(val) {\n      let opts = this.optionLabel ? ObjectUtils.generateSelectItems(val, this.optionLabel) : val;\n      this.visibleOptions = opts;\n      this._options = opts;\n      this.updateLabel();\n\n      if (this.filterValue && this.filterValue.length) {\n        this.activateFilter();\n      }\n    }\n\n    ngOnInit() {\n      this.updateLabel();\n    }\n\n    ngAfterContentInit() {\n      this.templates.forEach(item => {\n        switch (item.getType()) {\n          case 'item':\n            this.itemTemplate = item.template;\n            break;\n\n          case 'selectedItems':\n            this.selectedItemsTemplate = item.template;\n            break;\n\n          case 'header':\n            this.headerTemplate = item.template;\n            break;\n\n          case 'footer':\n            this.footerTemplate = item.template;\n            break;\n\n          default:\n            this.itemTemplate = item.template;\n            break;\n        }\n      });\n    }\n\n    ngAfterViewInit() {\n      if (this.overlayVisible) {\n        this.show();\n      }\n    }\n\n    ngAfterViewChecked() {\n      if (this.filtered) {\n        this.alignOverlay();\n        this.filtered = false;\n      }\n    }\n\n    writeValue(value) {\n      this.value = value;\n      this.updateLabel();\n      this.updateFilledState();\n      this.setDisabledSelectedOptions();\n      this.checkSelectionLimit();\n      this.cd.markForCheck();\n    }\n\n    checkSelectionLimit() {\n      if (this.selectionLimit && this.value && this.value.length === this.selectionLimit) {\n        this.maxSelectionLimitReached = true;\n      } else {\n        this.maxSelectionLimitReached = false;\n      }\n    }\n\n    updateFilledState() {\n      this.filled = this.value && this.value.length > 0;\n    }\n\n    registerOnChange(fn) {\n      this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.onModelTouched = fn;\n    }\n\n    setDisabledState(val) {\n      this.disabled = val;\n      this.cd.markForCheck();\n    }\n\n    onOptionClick(event) {\n      let option = event.option;\n\n      if (option.disabled) {\n        return;\n      }\n\n      const optionValue = option.value;\n      let selectionIndex = this.findSelectionIndex(optionValue);\n\n      if (selectionIndex != -1) {\n        this.value = this.value.filter((val, i) => i != selectionIndex);\n\n        if (this.selectionLimit) {\n          this.maxSelectionLimitReached = false;\n        }\n      } else {\n        if (!this.selectionLimit || !this.value || this.value.length < this.selectionLimit) {\n          this.value = [...(this.value || []), optionValue];\n        }\n\n        this.checkSelectionLimit();\n      }\n\n      this.onModelChange(this.value);\n      this.onChange.emit({\n        originalEvent: event.originalEvent,\n        value: this.value,\n        itemValue: optionValue\n      });\n      this.updateLabel();\n      this.updateFilledState();\n    }\n\n    isSelected(value) {\n      return this.findSelectionIndex(value) != -1;\n    }\n\n    findSelectionIndex(val) {\n      let index = -1;\n\n      if (this.value) {\n        for (let i = 0; i < this.value.length; i++) {\n          if (ObjectUtils.equals(this.value[i], val, this.dataKey)) {\n            index = i;\n            break;\n          }\n        }\n      }\n\n      return index;\n    }\n\n    toggleAll(event) {\n      if (this.isAllChecked()) {\n        if (this.disabledSelectedOptions && this.disabledSelectedOptions.length > 0) {\n          let value = [];\n          value = [...this.disabledSelectedOptions];\n          this.value = value;\n        } else {\n          this.value = [];\n        }\n      } else {\n        let opts = this.getVisibleOptions();\n\n        if (opts) {\n          let value = [];\n\n          if (this.disabledSelectedOptions && this.disabledSelectedOptions.length > 0) {\n            value = [...this.disabledSelectedOptions];\n          }\n\n          for (let i = 0; i < opts.length; i++) {\n            let option = opts[i];\n\n            if (!option.disabled) {\n              value.push(opts[i].value);\n            }\n          }\n\n          this.value = value;\n        }\n      }\n\n      this.onModelChange(this.value);\n      this.onChange.emit({\n        originalEvent: event,\n        value: this.value\n      });\n      this.updateFilledState();\n      this.updateLabel();\n    }\n\n    isAllChecked() {\n      if (this.filterValue && this.filterValue.trim().length) {\n        return this.value && this.visibleOptions && this.visibleOptions.length && this.isAllVisibleOptionsChecked();\n      } else {\n        let optionCount = this.getEnabledOptionCount();\n        let disabledSelectedOptionCount = this.disabledSelectedOptions.length;\n        return this.value && this.options && this.value.length > 0 && this.value.length == optionCount + disabledSelectedOptionCount;\n      }\n    }\n\n    isAllVisibleOptionsChecked() {\n      if (!this.visibleOptions || this.visibleOptions.length === 0) {\n        return false;\n      } else {\n        for (let option of this.visibleOptions) {\n          if (!this.isSelected(option.value)) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n    }\n\n    getEnabledOptionCount() {\n      if (this.options) {\n        let count = 0;\n\n        for (let opt of this.options) {\n          if (!opt.disabled) {\n            count++;\n          }\n        }\n\n        return count;\n      } else {\n        return 0;\n      }\n    }\n\n    setDisabledSelectedOptions() {\n      if (this.options) {\n        this.disabledSelectedOptions = [];\n\n        if (this.value) {\n          for (let opt of this.options) {\n            if (opt.disabled && this.isSelected(opt.value)) {\n              this.disabledSelectedOptions.push(opt.value);\n            }\n          }\n        }\n      }\n    }\n\n    show() {\n      if (!this.overlayVisible) {\n        this.overlayVisible = true;\n      }\n    }\n\n    onOverlayAnimationStart(event) {\n      switch (event.toState) {\n        case 'visible':\n          this.overlay = event.element;\n          this.appendOverlay();\n\n          if (this.autoZIndex) {\n            this.overlay.style.zIndex = String(this.baseZIndex + ++DomHandler.zindex);\n          }\n\n          this.alignOverlay();\n          this.bindDocumentClickListener();\n          this.bindDocumentResizeListener();\n          this.bindScrollListener();\n\n          if (this.filterInputChild && this.filterInputChild.nativeElement) {\n            this.preventModelTouched = true;\n\n            if (this.autofocusFilter) {\n              this.filterInputChild.nativeElement.focus();\n            }\n          }\n\n          this.onPanelShow.emit();\n          break;\n\n        case 'void':\n          this.onOverlayHide();\n          break;\n      }\n    }\n\n    appendOverlay() {\n      if (this.appendTo) {\n        if (this.appendTo === 'body') document.body.appendChild(this.overlay);else DomHandler.appendChild(this.overlay, this.appendTo);\n\n        if (!this.overlay.style.minWidth) {\n          this.overlay.style.minWidth = DomHandler.getWidth(this.containerViewChild.nativeElement) + 'px';\n        }\n      }\n    }\n\n    restoreOverlayAppend() {\n      if (this.overlay && this.appendTo) {\n        this.el.nativeElement.appendChild(this.overlay);\n      }\n    }\n\n    alignOverlay() {\n      if (this.overlay) {\n        if (this.appendTo) DomHandler.absolutePosition(this.overlay, this.containerViewChild.nativeElement);else DomHandler.relativePosition(this.overlay, this.containerViewChild.nativeElement);\n      }\n    }\n\n    hide() {\n      this.overlayVisible = false;\n      this.unbindDocumentClickListener();\n\n      if (this.resetFilterOnHide) {\n        this.filterInputChild.nativeElement.value = '';\n        this.onFilter();\n      }\n\n      this.onPanelHide.emit();\n      this.cd.markForCheck();\n    }\n\n    close(event) {\n      this.hide();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    onMouseclick(event, input) {\n      if (this.disabled || this.readonly || event.target.isSameNode(this.accessibleViewChild.nativeElement)) {\n        return;\n      }\n\n      this.onClick.emit(event);\n\n      if (!this.isOverlayClick(event)) {\n        if (this.overlayVisible) {\n          this.hide();\n        } else {\n          input.focus();\n          this.show();\n        }\n      }\n    }\n\n    isOverlayClick(event) {\n      return this.overlay && this.overlay.contains(event.target);\n    }\n\n    isOutsideClicked(event) {\n      return !(this.el.nativeElement.isSameNode(event.target) || this.el.nativeElement.contains(event.target) || this.isOverlayClick(event));\n    }\n\n    onInputFocus(event) {\n      this.focus = true;\n      this.onFocus.emit({\n        originalEvent: event\n      });\n    }\n\n    onInputBlur(event) {\n      this.focus = false;\n      this.onBlur.emit({\n        originalEvent: event\n      });\n\n      if (!this.preventModelTouched) {\n        this.onModelTouched();\n      }\n\n      this.preventModelTouched = false;\n    }\n\n    onOptionKeydown(event) {\n      if (this.readonly) {\n        return;\n      }\n\n      switch (event.originalEvent.which) {\n        //down\n        case 40:\n          var nextItem = this.findNextItem(event.originalEvent.target.parentElement);\n\n          if (nextItem) {\n            nextItem.focus();\n          }\n\n          event.originalEvent.preventDefault();\n          break;\n        //up\n\n        case 38:\n          var prevItem = this.findPrevItem(event.originalEvent.target.parentElement);\n\n          if (prevItem) {\n            prevItem.focus();\n          }\n\n          event.originalEvent.preventDefault();\n          break;\n        //enter\n\n        case 13:\n          this.onOptionClick(event);\n          event.originalEvent.preventDefault();\n          break;\n      }\n    }\n\n    findNextItem(item) {\n      let nextItem = item.nextElementSibling;\n      if (nextItem) return DomHandler.hasClass(nextItem.children[0], 'p-disabled') || DomHandler.isHidden(nextItem.children[0]) ? this.findNextItem(nextItem) : nextItem.children[0];else return null;\n    }\n\n    findPrevItem(item) {\n      let prevItem = item.previousElementSibling;\n      if (prevItem) return DomHandler.hasClass(prevItem.children[0], 'p-disabled') || DomHandler.isHidden(prevItem.children[0]) ? this.findPrevItem(prevItem) : prevItem.children[0];else return null;\n    }\n\n    onKeydown(event) {\n      switch (event.which) {\n        //down\n        case 40:\n          if (!this.overlayVisible && event.altKey) {\n            this.show();\n            event.preventDefault();\n          }\n\n          break;\n        //space\n\n        case 32:\n          if (!this.overlayVisible) {\n            this.show();\n            event.preventDefault();\n          }\n\n          break;\n        //escape\n\n        case 27:\n          this.hide();\n          break;\n      }\n    }\n\n    updateLabel() {\n      if (this.value && this.options && this.value.length && this.displaySelectedLabel) {\n        let label = '';\n\n        for (let i = 0; i < this.value.length; i++) {\n          let itemLabel = this.findLabelByValue(this.value[i]);\n\n          if (itemLabel) {\n            if (label.length > 0) {\n              label = label + ', ';\n            }\n\n            label = label + itemLabel;\n          }\n        }\n\n        if (this.value.length <= this.maxSelectedLabels) {\n          this.valuesAsString = label;\n        } else {\n          let pattern = /{(.*?)}/;\n\n          if (pattern.test(this.selectedItemsLabel)) {\n            this.valuesAsString = this.selectedItemsLabel.replace(this.selectedItemsLabel.match(pattern)[0], this.value.length + '');\n          } else {\n            this.valuesAsString = this.selectedItemsLabel;\n          }\n        }\n      } else {\n        this.valuesAsString = this.placeholder || this.defaultLabel;\n      }\n    }\n\n    findLabelByValue(val) {\n      let label = null;\n\n      for (let i = 0; i < this.options.length; i++) {\n        let option = this.options[i];\n\n        if (val == null && option.value == null || ObjectUtils.equals(val, option.value, this.dataKey)) {\n          label = option.label;\n          break;\n        }\n      }\n\n      return label;\n    }\n\n    onFilter() {\n      let inputValue = this.filterInputChild.nativeElement.value;\n\n      if (inputValue && inputValue.length) {\n        this.filterValue = inputValue;\n        this.activateFilter();\n      } else {\n        this.filterValue = null;\n        this.visibleOptions = this.options;\n        this.filtered = false;\n      }\n    }\n\n    activateFilter() {\n      if (this.options && this.options.length) {\n        let searchFields = this.filterBy.split(',');\n        this.visibleOptions = FilterUtils.filter(this.options, searchFields, this.filterValue, this.filterMatchMode, this.filterLocale);\n        this.filtered = true;\n      }\n    }\n\n    getVisibleOptions() {\n      return this.visibleOptions || this.options;\n    }\n\n    onHeaderCheckboxFocus() {\n      this.headerCheckboxFocus = true;\n    }\n\n    onHeaderCheckboxBlur() {\n      this.headerCheckboxFocus = false;\n    }\n\n    bindDocumentClickListener() {\n      if (!this.documentClickListener) {\n        const documentTarget = this.el ? this.el.nativeElement.ownerDocument : 'document';\n        this.documentClickListener = this.renderer.listen(documentTarget, 'click', event => {\n          if (this.isOutsideClicked(event)) {\n            this.hide();\n          }\n        });\n      }\n    }\n\n    unbindDocumentClickListener() {\n      if (this.documentClickListener) {\n        this.documentClickListener();\n        this.documentClickListener = null;\n      }\n    }\n\n    bindDocumentResizeListener() {\n      this.documentResizeListener = this.onWindowResize.bind(this);\n      window.addEventListener('resize', this.documentResizeListener);\n    }\n\n    unbindDocumentResizeListener() {\n      if (this.documentResizeListener) {\n        window.removeEventListener('resize', this.documentResizeListener);\n        this.documentResizeListener = null;\n      }\n    }\n\n    onWindowResize() {\n      if (!DomHandler.isAndroid()) {\n        this.hide();\n      }\n    }\n\n    bindScrollListener() {\n      if (!this.scrollHandler) {\n        this.scrollHandler = new ConnectedOverlayScrollHandler(this.containerViewChild.nativeElement, () => {\n          if (this.overlayVisible) {\n            this.hide();\n          }\n        });\n      }\n\n      this.scrollHandler.bindScrollListener();\n    }\n\n    unbindScrollListener() {\n      if (this.scrollHandler) {\n        this.scrollHandler.unbindScrollListener();\n      }\n    }\n\n    onOverlayHide() {\n      this.unbindDocumentClickListener();\n      this.unbindDocumentResizeListener();\n      this.unbindScrollListener();\n      this.overlay = null;\n      this.onModelTouched();\n    }\n\n    ngOnDestroy() {\n      if (this.scrollHandler) {\n        this.scrollHandler.destroy();\n        this.scrollHandler = null;\n      }\n\n      this.restoreOverlayAppend();\n      this.onOverlayHide();\n    }\n\n  }\n\n  MultiSelect.ɵfac = function MultiSelect_Factory(t) {\n    return new (t || MultiSelect)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  MultiSelect.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MultiSelect,\n    selectors: [[\"p-multiSelect\"]],\n    contentQueries: function MultiSelect_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, Footer, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, Header, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerFacet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerFacet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templates = _t);\n      }\n    },\n    viewQuery: function MultiSelect_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c5, 5);\n        ɵngcc0.ɵɵviewQuery(_c6, 5);\n        ɵngcc0.ɵɵviewQuery(_c7, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.containerViewChild = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.filterInputChild = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.accessibleViewChild = _t.first);\n      }\n    },\n    hostVars: 4,\n    hostBindings: function MultiSelect_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"p-inputwrapper-filled\", ctx.filled)(\"p-inputwrapper-focus\", ctx.focus);\n      }\n    },\n    inputs: {\n      scrollHeight: \"scrollHeight\",\n      filter: \"filter\",\n      displaySelectedLabel: \"displaySelectedLabel\",\n      maxSelectedLabels: \"maxSelectedLabels\",\n      selectedItemsLabel: \"selectedItemsLabel\",\n      showToggleAll: \"showToggleAll\",\n      emptyFilterMessage: \"emptyFilterMessage\",\n      resetFilterOnHide: \"resetFilterOnHide\",\n      dropdownIcon: \"dropdownIcon\",\n      showHeader: \"showHeader\",\n      autoZIndex: \"autoZIndex\",\n      baseZIndex: \"baseZIndex\",\n      filterBy: \"filterBy\",\n      showTransitionOptions: \"showTransitionOptions\",\n      hideTransitionOptions: \"hideTransitionOptions\",\n      filterMatchMode: \"filterMatchMode\",\n      tooltip: \"tooltip\",\n      tooltipPosition: \"tooltipPosition\",\n      tooltipPositionStyle: \"tooltipPositionStyle\",\n      autofocusFilter: \"autofocusFilter\",\n      defaultLabel: \"defaultLabel\",\n      placeholder: \"placeholder\",\n      options: \"options\",\n      disabled: \"disabled\",\n      overlayVisible: \"overlayVisible\",\n      style: \"style\",\n      styleClass: \"styleClass\",\n      panelStyle: \"panelStyle\",\n      panelStyleClass: \"panelStyleClass\",\n      inputId: \"inputId\",\n      readonly: \"readonly\",\n      filterPlaceHolder: \"filterPlaceHolder\",\n      filterLocale: \"filterLocale\",\n      tabindex: \"tabindex\",\n      appendTo: \"appendTo\",\n      dataKey: \"dataKey\",\n      name: \"name\",\n      ariaLabelledBy: \"ariaLabelledBy\",\n      selectionLimit: \"selectionLimit\",\n      optionLabel: \"optionLabel\",\n      virtualScroll: \"virtualScroll\",\n      itemSize: \"itemSize\",\n      ariaFilterLabel: \"ariaFilterLabel\",\n      tooltipStyleClass: \"tooltipStyleClass\"\n    },\n    outputs: {\n      onChange: \"onChange\",\n      onFocus: \"onFocus\",\n      onBlur: \"onBlur\",\n      onClick: \"onClick\",\n      onPanelShow: \"onPanelShow\",\n      onPanelHide: \"onPanelHide\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([MULTISELECT_VALUE_ACCESSOR])],\n    ngContentSelectors: _c16,\n    decls: 12,\n    vars: 31,\n    consts: [[3, \"ngClass\", \"ngStyle\", \"click\"], [\"container\", \"\"], [1, \"p-hidden-accessible\"], [\"type\", \"text\", \"readonly\", \"readonly\", \"aria-haspopup\", \"listbox\", \"role\", \"listbox\", 3, \"disabled\", \"focus\", \"blur\", \"keydown\"], [\"in\", \"\"], [1, \"p-multiselect-label-container\", 3, \"pTooltip\", \"tooltipPosition\", \"positionStyle\", \"tooltipStyleClass\"], [1, \"p-multiselect-label\", 3, \"ngClass\"], [4, \"ngIf\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"ngClass\"], [1, \"p-multiselect-trigger-icon\", 3, \"ngClass\"], [3, \"ngClass\", \"ngStyle\", \"class\", \"keydown\", 4, \"ngIf\"], [3, \"ngClass\", \"ngStyle\", \"keydown\"], [\"class\", \"p-multiselect-header\", 4, \"ngIf\"], [1, \"p-multiselect-items-wrapper\"], [\"role\", \"listbox\", \"aria-multiselectable\", \"true\", 1, \"p-multiselect-items\", \"p-component\"], [4, \"ngIf\", \"ngIfElse\"], [\"virtualScrollList\", \"\"], [\"class\", \"p-multiselect-empty-message\", 4, \"ngIf\"], [\"class\", \"p-multiselect-footer\", 4, \"ngIf\"], [1, \"p-multiselect-header\"], [4, \"ngTemplateOutlet\"], [\"class\", \"p-checkbox p-component\", 4, \"ngIf\"], [\"class\", \"p-multiselect-filter-container\", 4, \"ngIf\"], [\"type\", \"button\", \"pRipple\", \"\", 1, \"p-multiselect-close\", \"p-link\", 3, \"click\"], [1, \"p-multiselect-close-icon\", \"pi\", \"pi-times\"], [1, \"p-checkbox\", \"p-component\"], [\"type\", \"checkbox\", \"readonly\", \"readonly\", 3, \"checked\", \"focus\", \"blur\", \"keydown.space\"], [\"role\", \"checkbox\", 1, \"p-checkbox-box\", 3, \"ngClass\", \"click\"], [1, \"p-checkbox-icon\", 3, \"ngClass\"], [1, \"p-multiselect-filter-container\"], [\"type\", \"text\", \"role\", \"textbox\", 1, \"p-multiselect-filter\", \"p-inputtext\", \"p-component\", 3, \"value\", \"input\"], [\"filterInput\", \"\"], [1, \"p-multiselect-filter-icon\", \"pi\", \"pi-search\"], [\"ngFor\", \"\", 3, \"ngForOf\"], [3, \"option\", \"selected\", \"maxSelectionLimitReached\", \"template\", \"onClick\", \"onKeydown\"], [3, \"ngStyle\", \"itemSize\", 4, \"ngIf\"], [3, \"ngStyle\", \"itemSize\"], [\"viewport\", \"\"], [4, \"cdkVirtualFor\", \"cdkVirtualForOf\"], [3, \"option\", \"selected\", \"maxSelectionLimitReached\", \"template\", \"itemSize\", \"onClick\", \"onKeydown\"], [1, \"p-multiselect-empty-message\"], [1, \"p-multiselect-footer\"]],\n    template: function MultiSelect_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r47 = ɵngcc0.ɵɵgetCurrentView();\n\n        ɵngcc0.ɵɵprojectionDef(_c12);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MultiSelect_Template_div_click_0_listener($event) {\n          ɵngcc0.ɵɵrestoreView(_r47);\n\n          const _r1 = ɵngcc0.ɵɵreference(4);\n\n          return ctx.onMouseclick($event, _r1);\n        });\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵelementStart(3, \"input\", 3, 4);\n        ɵngcc0.ɵɵlistener(\"focus\", function MultiSelect_Template_input_focus_3_listener($event) {\n          return ctx.onInputFocus($event);\n        })(\"blur\", function MultiSelect_Template_input_blur_3_listener($event) {\n          return ctx.onInputBlur($event);\n        })(\"keydown\", function MultiSelect_Template_input_keydown_3_listener($event) {\n          return ctx.onKeydown($event);\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"div\", 5);\n        ɵngcc0.ɵɵelementStart(6, \"div\", 6);\n        ɵngcc0.ɵɵtemplate(7, MultiSelect_ng_container_7_Template, 2, 1, \"ng-container\", 7);\n        ɵngcc0.ɵɵtemplate(8, MultiSelect_ng_container_8_Template, 1, 0, \"ng-container\", 8);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n        ɵngcc0.ɵɵelement(10, \"span\", 10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(11, MultiSelect_div_11_Template, 9, 18, \"div\", 11);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassMap(ctx.styleClass);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction3(21, _c13, ctx.overlayVisible, ctx.focus, ctx.disabled))(\"ngStyle\", ctx.style);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"id\", ctx.inputId)(\"name\", ctx.name)(\"tabindex\", ctx.tabindex)(\"aria-expanded\", ctx.overlayVisible)(\"aria-labelledby\", ctx.ariaLabelledBy);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"pTooltip\", ctx.tooltip)(\"tooltipPosition\", ctx.tooltipPosition)(\"positionStyle\", ctx.tooltipPositionStyle)(\"tooltipStyleClass\", ctx.tooltipStyleClass);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(25, _c14, ctx.valuesAsString === (ctx.defaultLabel || ctx.placeholder), (ctx.valuesAsString == null || ctx.valuesAsString.length === 0) && (ctx.placeholder == null || ctx.placeholder.length === 0)));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.selectedItemsTemplate);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.selectedItemsTemplate)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(28, _c4, ctx.value));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction0(30, _c15));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.dropdownIcon);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.overlayVisible);\n      }\n    },\n    directives: [ɵngcc1.NgClass, ɵngcc1.NgStyle, ɵngcc2.Tooltip, ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet, ɵngcc3.Ripple, ɵngcc1.NgForOf, MultiSelectItem, ɵngcc4.CdkVirtualScrollViewport, ɵngcc4.CdkFixedSizeVirtualScroll, ɵngcc4.CdkVirtualForOf],\n    styles: [\".p-multiselect{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;cursor:pointer;display:-ms-inline-flexbox;display:inline-flex;position:relative;user-select:none}.p-multiselect-trigger{-ms-flex-align:center;-ms-flex-negative:0;-ms-flex-pack:center;align-items:center;display:-ms-flexbox;display:flex;flex-shrink:0;justify-content:center}.p-multiselect-label-container{-ms-flex:1 1 auto;cursor:pointer;flex:1 1 auto;overflow:hidden}.p-multiselect-label{cursor:pointer;display:block;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.p-multiselect-label-empty{overflow:hidden;visibility:hidden}.p-multiselect .p-multiselect-panel{min-width:100%}.p-multiselect-panel{position:absolute}.p-multiselect-items-wrapper{overflow:auto}.p-multiselect-items{list-style-type:none;margin:0;padding:0}.p-multiselect-item{cursor:pointer;font-weight:400;overflow:hidden;position:relative;white-space:nowrap}.p-multiselect-header,.p-multiselect-item{-ms-flex-align:center;align-items:center;display:-ms-flexbox;display:flex}.p-multiselect-header{-ms-flex-pack:justify;justify-content:space-between}.p-multiselect-filter-container{-ms-flex:1 1 auto;flex:1 1 auto;position:relative}.p-multiselect-filter-icon{margin-top:-.5rem;position:absolute;top:50%}.p-multiselect-filter-container .p-inputtext{width:100%}.p-multiselect-close{-ms-flex-align:center;-ms-flex-negative:0;-ms-flex-pack:center;align-items:center;flex-shrink:0;justify-content:center;overflow:hidden;position:relative}.p-fluid .p-multiselect,.p-multiselect-close{display:-ms-flexbox;display:flex}\"],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('overlayAnimation', [transition(':enter', [style({\n        opacity: 0,\n        transform: 'scaleY(0.8)'\n      }), animate('{{showTransitionParams}}')]), transition(':leave', [animate('{{hideTransitionParams}}', style({\n        opacity: 0\n      }))])])]\n    },\n    changeDetection: 0\n  });\n  return MultiSelect;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MultiSelectModule = /*#__PURE__*/(() => {\n  class MultiSelectModule {}\n\n  MultiSelectModule.ɵfac = function MultiSelectModule_Factory(t) {\n    return new (t || MultiSelectModule)();\n  };\n\n  MultiSelectModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MultiSelectModule\n  });\n  MultiSelectModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, SharedModule, ScrollingModule, TooltipModule, RippleModule], SharedModule, ScrollingModule]\n  });\n  return MultiSelectModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MultiSelectModule, {\n    declarations: function () {\n      return [MultiSelect, MultiSelectItem];\n    },\n    imports: function () {\n      return [CommonModule, SharedModule, ScrollingModule, TooltipModule, RippleModule];\n    },\n    exports: function () {\n      return [MultiSelect, SharedModule, ScrollingModule];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MULTISELECT_VALUE_ACCESSOR, MultiSelect, MultiSelectItem, MultiSelectModule }; //# sourceMappingURL=primeng-multiselect.js.map","map":null,"metadata":{},"sourceType":"module"}