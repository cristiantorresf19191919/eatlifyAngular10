{"ast":null,"code":"import { forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, Input, ViewChild, Output, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nconst _c0 = [\"cb\"];\n\nconst _c1 = function (a1, a2, a3) {\n  return {\n    \"p-checkbox-label\": true,\n    \"p-checkbox-label-active\": a1,\n    \"p-disabled\": a2,\n    \"p-checkbox-label-focus\": a3\n  };\n};\n\nfunction Checkbox_label_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"label\", 7);\n    ɵngcc0.ɵɵlistener(\"click\", function Checkbox_label_6_Template_label_click_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r2 = ɵngcc0.ɵɵnextContext();\n\n      const _r0 = ɵngcc0.ɵɵreference(3);\n\n      return ctx_r2.onClick($event, _r0, true);\n    });\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassMap(ctx_r1.labelStyleClass);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction3(5, _c1, ctx_r1.checked, ctx_r1.disabled, ctx_r1.focused));\n    ɵngcc0.ɵɵattribute(\"for\", ctx_r1.inputId);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r1.label);\n  }\n}\n\nconst _c2 = function (a1, a2, a3) {\n  return {\n    \"p-checkbox p-component\": true,\n    \"p-checkbox-checked\": a1,\n    \"p-checkbox-disabled\": a2,\n    \"p-checkbox-focused\": a3\n  };\n};\n\nconst _c3 = function (a0, a1, a2) {\n  return {\n    \"p-highlight\": a0,\n    \"p-disabled\": a1,\n    \"p-focus\": a2\n  };\n};\n\nconst CHECKBOX_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => Checkbox),\n  multi: true\n};\nlet Checkbox = /*#__PURE__*/(() => {\n  class Checkbox {\n    constructor(cd) {\n      this.cd = cd;\n      this.checkboxIcon = 'pi pi-check';\n      this.onChange = new EventEmitter();\n\n      this.onModelChange = () => {};\n\n      this.onModelTouched = () => {};\n\n      this.focused = false;\n      this.checked = false;\n    }\n\n    onClick(event, checkbox, focus) {\n      event.preventDefault();\n\n      if (this.disabled || this.readonly) {\n        return;\n      }\n\n      this.checked = !this.checked;\n      this.updateModel(event);\n\n      if (focus) {\n        checkbox.focus();\n      }\n    }\n\n    updateModel(event) {\n      if (!this.binary) {\n        if (this.checked) this.addValue();else this.removeValue();\n        this.onModelChange(this.model);\n\n        if (this.formControl) {\n          this.formControl.setValue(this.model);\n        }\n      } else {\n        this.onModelChange(this.checked);\n      }\n\n      this.onChange.emit({\n        checked: this.checked,\n        originalEvent: event\n      });\n    }\n\n    handleChange(event) {\n      if (!this.readonly) {\n        this.checked = event.target.checked;\n        this.updateModel(event);\n      }\n    }\n\n    isChecked() {\n      if (this.binary) return this.model;else return this.model && this.model.indexOf(this.value) > -1;\n    }\n\n    removeValue() {\n      this.model = this.model.filter(val => val !== this.value);\n    }\n\n    addValue() {\n      if (this.model) this.model = [...this.model, this.value];else this.model = [this.value];\n    }\n\n    onFocus() {\n      this.focused = true;\n    }\n\n    onBlur() {\n      this.focused = false;\n      this.onModelTouched();\n    }\n\n    focus() {\n      this.inputViewChild.nativeElement.focus();\n    }\n\n    writeValue(model) {\n      this.model = model;\n      this.checked = this.isChecked();\n      this.cd.markForCheck();\n    }\n\n    registerOnChange(fn) {\n      this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.onModelTouched = fn;\n    }\n\n    setDisabledState(val) {\n      this.disabled = val;\n      this.cd.markForCheck();\n    }\n\n  }\n\n  Checkbox.ɵfac = function Checkbox_Factory(t) {\n    return new (t || Checkbox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  Checkbox.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: Checkbox,\n    selectors: [[\"p-checkbox\"]],\n    viewQuery: function Checkbox_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputViewChild = _t.first);\n      }\n    },\n    inputs: {\n      checkboxIcon: \"checkboxIcon\",\n      disabled: \"disabled\",\n      value: \"value\",\n      name: \"name\",\n      binary: \"binary\",\n      label: \"label\",\n      ariaLabelledBy: \"ariaLabelledBy\",\n      tabindex: \"tabindex\",\n      inputId: \"inputId\",\n      style: \"style\",\n      styleClass: \"styleClass\",\n      labelStyleClass: \"labelStyleClass\",\n      formControl: \"formControl\",\n      readonly: \"readonly\",\n      required: \"required\"\n    },\n    outputs: {\n      onChange: \"onChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([CHECKBOX_VALUE_ACCESSOR])],\n    decls: 7,\n    vars: 25,\n    consts: [[3, \"ngStyle\", \"ngClass\"], [1, \"p-hidden-accessible\"], [\"type\", \"checkbox\", 3, \"readonly\", \"value\", \"checked\", \"disabled\", \"focus\", \"blur\", \"change\"], [\"cb\", \"\"], [\"role\", \"checkbox\", 1, \"p-checkbox-box\", 3, \"ngClass\", \"click\"], [1, \"p-checkbox-icon\", 3, \"ngClass\"], [3, \"class\", \"ngClass\", \"click\", 4, \"ngIf\"], [3, \"ngClass\", \"click\"]],\n    template: function Checkbox_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n        ɵngcc0.ɵɵelementStart(2, \"input\", 2, 3);\n        ɵngcc0.ɵɵlistener(\"focus\", function Checkbox_Template_input_focus_2_listener() {\n          return ctx.onFocus();\n        })(\"blur\", function Checkbox_Template_input_blur_2_listener() {\n          return ctx.onBlur();\n        })(\"change\", function Checkbox_Template_input_change_2_listener($event) {\n          return ctx.handleChange($event);\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(4, \"div\", 4);\n        ɵngcc0.ɵɵlistener(\"click\", function Checkbox_Template_div_click_4_listener($event) {\n          ɵngcc0.ɵɵrestoreView(_r4);\n\n          const _r0 = ɵngcc0.ɵɵreference(3);\n\n          return ctx.onClick($event, _r0, true);\n        });\n        ɵngcc0.ɵɵelement(5, \"span\", 5);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(6, Checkbox_label_6_Template, 2, 9, \"label\", 6);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassMap(ctx.styleClass);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx.style)(\"ngClass\", ɵngcc0.ɵɵpureFunction3(17, _c2, ctx.checked, ctx.disabled, ctx.focused));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"readonly\", ctx.readonly)(\"value\", ctx.value)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"id\", ctx.inputId)(\"name\", ctx.name)(\"tabindex\", ctx.tabindex)(\"aria-labelledby\", ctx.ariaLabelledBy)(\"required\", ctx.required);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction3(21, _c3, ctx.checked, ctx.disabled, ctx.focused));\n        ɵngcc0.ɵɵattribute(\"aria-checked\", ctx.checked);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.checked ? ctx.checkboxIcon : null);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.label);\n      }\n    },\n    directives: [ɵngcc1.NgStyle, ɵngcc1.NgClass, ɵngcc1.NgIf],\n    styles: [\".p-checkbox{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;cursor:pointer;display:-ms-inline-flexbox;display:inline-flex;user-select:none;vertical-align:bottom}.p-checkbox-box{-ms-flex-pack:center;display:-ms-flexbox;display:flex;justify-content:center}.p-checkbox-box,p-checkbox{-ms-flex-align:center;align-items:center}p-checkbox{display:-ms-inline-flexbox;display:inline-flex;vertical-align:bottom}.p-checkbox-label{line-height:1}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return Checkbox;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet CheckboxModule = /*#__PURE__*/(() => {\n  class CheckboxModule {}\n\n  CheckboxModule.ɵfac = function CheckboxModule_Factory(t) {\n    return new (t || CheckboxModule)();\n  };\n\n  CheckboxModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: CheckboxModule\n  });\n  CheckboxModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return CheckboxModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CheckboxModule, {\n    declarations: function () {\n      return [Checkbox];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [Checkbox];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CHECKBOX_VALUE_ACCESSOR, Checkbox, CheckboxModule }; //# sourceMappingURL=primeng-checkbox.js.map","map":null,"metadata":{},"sourceType":"module"}