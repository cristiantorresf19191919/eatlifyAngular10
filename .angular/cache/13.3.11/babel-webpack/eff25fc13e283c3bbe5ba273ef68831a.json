{"ast":null,"code":"import { forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Renderer2, NgZone, ChangeDetectorRef, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DomHandler } from 'primeng/dom';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nconst _c0 = [\"sliderHandle\"];\nconst _c1 = [\"sliderHandleStart\"];\nconst _c2 = [\"sliderHandleEnd\"];\n\nconst _c3 = function (a0, a1) {\n  return {\n    \"left\": a0,\n    width: a1\n  };\n};\n\nfunction Slider_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction2(1, _c3, ctx_r0.handleValues[0] + \"%\", ctx_r0.handleValues[1] - ctx_r0.handleValues[0] + \"%\"));\n  }\n}\n\nconst _c4 = function (a0, a1) {\n  return {\n    \"bottom\": a0,\n    height: a1\n  };\n};\n\nfunction Slider_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction2(1, _c4, ctx_r1.handleValues[0] + \"%\", ctx_r1.handleValues[1] - ctx_r1.handleValues[0] + \"%\"));\n  }\n}\n\nconst _c5 = function (a0) {\n  return {\n    \"height\": a0\n  };\n};\n\nfunction Slider_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction1(1, _c5, ctx_r2.handleValue + \"%\"));\n  }\n}\n\nconst _c6 = function (a0) {\n  return {\n    \"width\": a0\n  };\n};\n\nfunction Slider_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction1(1, _c6, ctx_r3.handleValue + \"%\"));\n  }\n}\n\nconst _c7 = function (a0, a1) {\n  return {\n    \"left\": a0,\n    \"bottom\": a1\n  };\n};\n\nfunction Slider_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"span\", 5, 6);\n    ɵngcc0.ɵɵlistener(\"keydown\", function Slider_span_5_Template_span_keydown_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      const ctx_r8 = ɵngcc0.ɵɵnextContext();\n      return ctx_r8.onHandleKeydown($event);\n    })(\"mousedown\", function Slider_span_5_Template_span_mousedown_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      const ctx_r10 = ɵngcc0.ɵɵnextContext();\n      return ctx_r10.onMouseDown($event);\n    })(\"touchstart\", function Slider_span_5_Template_span_touchstart_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      const ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ctx_r11.onTouchStart($event);\n    })(\"touchmove\", function Slider_span_5_Template_span_touchmove_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      const ctx_r12 = ɵngcc0.ɵɵnextContext();\n      return ctx_r12.onTouchMove($event);\n    })(\"touchend\", function Slider_span_5_Template_span_touchend_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      const ctx_r13 = ɵngcc0.ɵɵnextContext();\n      return ctx_r13.onTouchEnd($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"transition\", ctx_r4.dragging ? \"none\" : null);\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction2(8, _c7, ctx_r4.orientation == \"horizontal\" ? ctx_r4.handleValue + \"%\" : null, ctx_r4.orientation == \"vertical\" ? ctx_r4.handleValue + \"%\" : null));\n    ɵngcc0.ɵɵattribute(\"tabindex\", ctx_r4.disabled ? null : ctx_r4.tabindex)(\"aria-valuemin\", ctx_r4.min)(\"aria-valuenow\", ctx_r4.value)(\"aria-valuemax\", ctx_r4.max)(\"aria-labelledby\", ctx_r4.ariaLabelledBy);\n  }\n}\n\nconst _c8 = function (a0) {\n  return {\n    \"p-slider-handle-active\": a0\n  };\n};\n\nfunction Slider_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"span\", 7, 8);\n    ɵngcc0.ɵɵlistener(\"keydown\", function Slider_span_6_Template_span_keydown_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r16);\n      const ctx_r15 = ɵngcc0.ɵɵnextContext();\n      return ctx_r15.onHandleKeydown($event, 0);\n    })(\"mousedown\", function Slider_span_6_Template_span_mousedown_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r16);\n      const ctx_r17 = ɵngcc0.ɵɵnextContext();\n      return ctx_r17.onMouseDown($event, 0);\n    })(\"touchstart\", function Slider_span_6_Template_span_touchstart_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r16);\n      const ctx_r18 = ɵngcc0.ɵɵnextContext();\n      return ctx_r18.onTouchStart($event, 0);\n    })(\"touchmove\", function Slider_span_6_Template_span_touchmove_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r16);\n      const ctx_r19 = ɵngcc0.ɵɵnextContext();\n      return ctx_r19.onTouchMove($event, 0);\n    })(\"touchend\", function Slider_span_6_Template_span_touchend_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r16);\n      const ctx_r20 = ɵngcc0.ɵɵnextContext();\n      return ctx_r20.onTouchEnd($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"transition\", ctx_r5.dragging ? \"none\" : null);\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction2(9, _c7, ctx_r5.rangeStartLeft, ctx_r5.rangeStartBottom))(\"ngClass\", ɵngcc0.ɵɵpureFunction1(12, _c8, ctx_r5.handleIndex == 0));\n    ɵngcc0.ɵɵattribute(\"tabindex\", ctx_r5.disabled ? null : ctx_r5.tabindex)(\"aria-valuemin\", ctx_r5.min)(\"aria-valuenow\", ctx_r5.value ? ctx_r5.value[0] : null)(\"aria-valuemax\", ctx_r5.max)(\"aria-labelledby\", ctx_r5.ariaLabelledBy);\n  }\n}\n\nfunction Slider_span_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"span\", 7, 9);\n    ɵngcc0.ɵɵlistener(\"keydown\", function Slider_span_7_Template_span_keydown_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r23);\n      const ctx_r22 = ɵngcc0.ɵɵnextContext();\n      return ctx_r22.onHandleKeydown($event, 1);\n    })(\"mousedown\", function Slider_span_7_Template_span_mousedown_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r23);\n      const ctx_r24 = ɵngcc0.ɵɵnextContext();\n      return ctx_r24.onMouseDown($event, 1);\n    })(\"touchstart\", function Slider_span_7_Template_span_touchstart_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r23);\n      const ctx_r25 = ɵngcc0.ɵɵnextContext();\n      return ctx_r25.onTouchStart($event, 1);\n    })(\"touchmove\", function Slider_span_7_Template_span_touchmove_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r23);\n      const ctx_r26 = ɵngcc0.ɵɵnextContext();\n      return ctx_r26.onTouchMove($event, 1);\n    })(\"touchend\", function Slider_span_7_Template_span_touchend_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r23);\n      const ctx_r27 = ɵngcc0.ɵɵnextContext();\n      return ctx_r27.onTouchEnd($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"transition\", ctx_r6.dragging ? \"none\" : null);\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction2(9, _c7, ctx_r6.rangeEndLeft, ctx_r6.rangeEndBottom))(\"ngClass\", ɵngcc0.ɵɵpureFunction1(12, _c8, ctx_r6.handleIndex == 1));\n    ɵngcc0.ɵɵattribute(\"tabindex\", ctx_r6.disabled ? null : ctx_r6.tabindex)(\"aria-valuemin\", ctx_r6.min)(\"aria-valuenow\", ctx_r6.value ? ctx_r6.value[1] : null)(\"aria-valuemax\", ctx_r6.max)(\"aria-labelledby\", ctx_r6.ariaLabelledBy);\n  }\n}\n\nconst _c9 = function (a1, a2, a3, a4) {\n  return {\n    \"p-slider p-component\": true,\n    \"p-disabled\": a1,\n    \"p-slider-horizontal\": a2,\n    \"p-slider-vertical\": a3,\n    \"p-slider-animate\": a4\n  };\n};\n\nconst SLIDER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => Slider),\n  multi: true\n};\nlet Slider = /*#__PURE__*/(() => {\n  class Slider {\n    constructor(el, renderer, ngZone, cd) {\n      this.el = el;\n      this.renderer = renderer;\n      this.ngZone = ngZone;\n      this.cd = cd;\n      this.min = 0;\n      this.max = 100;\n      this.orientation = 'horizontal';\n      this.tabindex = 0;\n      this.onChange = new EventEmitter();\n      this.onSlideEnd = new EventEmitter();\n      this.handleValues = [];\n\n      this.onModelChange = () => {};\n\n      this.onModelTouched = () => {};\n\n      this.handleIndex = 0;\n    }\n\n    onMouseDown(event, index) {\n      if (this.disabled) {\n        return;\n      }\n\n      this.dragging = true;\n      this.updateDomData();\n      this.sliderHandleClick = true;\n      this.handleIndex = index;\n      this.bindDragListeners();\n      event.target.focus();\n      event.preventDefault();\n\n      if (this.animate) {\n        DomHandler.removeClass(this.el.nativeElement.children[0], 'p-slider-animate');\n      }\n    }\n\n    onTouchStart(event, index) {\n      if (this.disabled) {\n        return;\n      }\n\n      var touchobj = event.changedTouches[0];\n      this.startHandleValue = this.range ? this.handleValues[index] : this.handleValue;\n      this.dragging = true;\n      this.handleIndex = index;\n\n      if (this.orientation === 'horizontal') {\n        this.startx = parseInt(touchobj.clientX, 10);\n        this.barWidth = this.el.nativeElement.children[0].offsetWidth;\n      } else {\n        this.starty = parseInt(touchobj.clientY, 10);\n        this.barHeight = this.el.nativeElement.children[0].offsetHeight;\n      }\n\n      if (this.animate) {\n        DomHandler.removeClass(this.el.nativeElement.children[0], 'p-slider-animate');\n      }\n\n      event.preventDefault();\n    }\n\n    onTouchMove(event, index) {\n      if (this.disabled) {\n        return;\n      }\n\n      var touchobj = event.changedTouches[0],\n          handleValue = 0;\n\n      if (this.orientation === 'horizontal') {\n        handleValue = Math.floor((parseInt(touchobj.clientX, 10) - this.startx) * 100 / this.barWidth) + this.startHandleValue;\n      } else {\n        handleValue = Math.floor((this.starty - parseInt(touchobj.clientY, 10)) * 100 / this.barHeight) + this.startHandleValue;\n      }\n\n      this.setValueFromHandle(event, handleValue);\n      event.preventDefault();\n    }\n\n    onTouchEnd(event, index) {\n      if (this.disabled) {\n        return;\n      }\n\n      this.dragging = false;\n      if (this.range) this.onSlideEnd.emit({\n        originalEvent: event,\n        values: this.values\n      });else this.onSlideEnd.emit({\n        originalEvent: event,\n        value: this.value\n      });\n\n      if (this.animate) {\n        DomHandler.addClass(this.el.nativeElement.children[0], 'p-slider-animate');\n      }\n\n      event.preventDefault();\n    }\n\n    onBarClick(event) {\n      if (this.disabled) {\n        return;\n      }\n\n      if (!this.sliderHandleClick) {\n        this.updateDomData();\n        this.handleChange(event);\n      }\n\n      this.sliderHandleClick = false;\n    }\n\n    onHandleKeydown(event, handleIndex) {\n      if (this.disabled) {\n        return;\n      }\n\n      if (event.which == 38 || event.which == 39) {\n        this.spin(event, 1, handleIndex);\n      } else if (event.which == 37 || event.which == 40) {\n        this.spin(event, -1, handleIndex);\n      }\n    }\n\n    spin(event, dir, handleIndex) {\n      let step = (this.step || 1) * dir;\n\n      if (this.range) {\n        this.handleIndex = handleIndex;\n        this.updateValue(this.values[this.handleIndex] + step);\n        this.updateHandleValue();\n      } else {\n        this.updateValue(this.value + step);\n        this.updateHandleValue();\n      }\n\n      event.preventDefault();\n    }\n\n    handleChange(event) {\n      let handleValue = this.calculateHandleValue(event);\n      this.setValueFromHandle(event, handleValue);\n    }\n\n    bindDragListeners() {\n      this.ngZone.runOutsideAngular(() => {\n        const documentTarget = this.el ? this.el.nativeElement.ownerDocument : 'document';\n\n        if (!this.dragListener) {\n          this.dragListener = this.renderer.listen(documentTarget, 'mousemove', event => {\n            if (this.dragging) {\n              this.ngZone.run(() => {\n                this.handleChange(event);\n              });\n            }\n          });\n        }\n\n        if (!this.mouseupListener) {\n          this.mouseupListener = this.renderer.listen(documentTarget, 'mouseup', event => {\n            if (this.dragging) {\n              this.dragging = false;\n              this.ngZone.run(() => {\n                if (this.range) this.onSlideEnd.emit({\n                  originalEvent: event,\n                  values: this.values\n                });else this.onSlideEnd.emit({\n                  originalEvent: event,\n                  value: this.value\n                });\n\n                if (this.animate) {\n                  DomHandler.addClass(this.el.nativeElement.children[0], 'p-slider-animate');\n                }\n              });\n            }\n          });\n        }\n      });\n    }\n\n    unbindDragListeners() {\n      if (this.dragListener) {\n        this.dragListener();\n      }\n\n      if (this.mouseupListener) {\n        this.mouseupListener();\n      }\n    }\n\n    setValueFromHandle(event, handleValue) {\n      let newValue = this.getValueFromHandle(handleValue);\n\n      if (this.range) {\n        if (this.step) {\n          this.handleStepChange(newValue, this.values[this.handleIndex]);\n        } else {\n          this.handleValues[this.handleIndex] = handleValue;\n          this.updateValue(newValue, event);\n        }\n      } else {\n        if (this.step) {\n          this.handleStepChange(newValue, this.value);\n        } else {\n          this.handleValue = handleValue;\n          this.updateValue(newValue, event);\n        }\n      }\n\n      this.cd.markForCheck();\n    }\n\n    handleStepChange(newValue, oldValue) {\n      let diff = newValue - oldValue;\n      let val = oldValue;\n\n      if (diff < 0) {\n        val = oldValue + Math.ceil(newValue / this.step - oldValue / this.step) * this.step;\n      } else if (diff > 0) {\n        val = oldValue + Math.floor(newValue / this.step - oldValue / this.step) * this.step;\n      }\n\n      this.updateValue(val);\n      this.updateHandleValue();\n    }\n\n    writeValue(value) {\n      if (this.range) this.values = value || [0, 0];else this.value = value || 0;\n      this.updateHandleValue();\n      this.cd.markForCheck();\n    }\n\n    registerOnChange(fn) {\n      this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.onModelTouched = fn;\n    }\n\n    setDisabledState(val) {\n      this.disabled = val;\n      this.cd.markForCheck();\n    }\n\n    get rangeStartLeft() {\n      return this.isVertical() ? 'auto' : this.handleValues[0] + '%';\n    }\n\n    get rangeStartBottom() {\n      return this.isVertical() ? this.handleValues[0] + '%' : 'auto';\n    }\n\n    get rangeEndLeft() {\n      return this.isVertical() ? 'auto' : this.handleValues[1] + '%';\n    }\n\n    get rangeEndBottom() {\n      return this.isVertical() ? this.handleValues[1] + '%' : 'auto';\n    }\n\n    isVertical() {\n      return this.orientation === 'vertical';\n    }\n\n    updateDomData() {\n      let rect = this.el.nativeElement.children[0].getBoundingClientRect();\n      this.initX = rect.left + DomHandler.getWindowScrollLeft();\n      this.initY = rect.top + DomHandler.getWindowScrollTop();\n      this.barWidth = this.el.nativeElement.children[0].offsetWidth;\n      this.barHeight = this.el.nativeElement.children[0].offsetHeight;\n    }\n\n    calculateHandleValue(event) {\n      if (this.orientation === 'horizontal') return (event.pageX - this.initX) * 100 / this.barWidth;else return (this.initY + this.barHeight - event.pageY) * 100 / this.barHeight;\n    }\n\n    updateHandleValue() {\n      if (this.range) {\n        this.handleValues[0] = (this.values[0] < this.min ? 0 : this.values[0] - this.min) * 100 / (this.max - this.min);\n        this.handleValues[1] = (this.values[1] > this.max ? 100 : this.values[1] - this.min) * 100 / (this.max - this.min);\n      } else {\n        if (this.value < this.min) this.handleValue = 0;else if (this.value > this.max) this.handleValue = 100;else this.handleValue = (this.value - this.min) * 100 / (this.max - this.min);\n      }\n    }\n\n    updateValue(val, event) {\n      if (this.range) {\n        let value = val;\n\n        if (this.handleIndex == 0) {\n          if (value < this.min) {\n            value = this.min;\n            this.handleValues[0] = 0;\n          } else if (value > this.values[1]) {\n            value = this.values[1];\n            this.handleValues[0] = this.handleValues[1];\n          }\n\n          this.sliderHandleStart.nativeElement.focus();\n        } else {\n          if (value > this.max) {\n            value = this.max;\n            this.handleValues[1] = 100;\n          } else if (value < this.values[0]) {\n            value = this.values[0];\n            this.handleValues[1] = this.handleValues[0];\n          }\n\n          this.sliderHandleEnd.nativeElement.focus();\n        }\n\n        this.values[this.handleIndex] = this.getNormalizedValue(value);\n        this.values = this.values.slice();\n        this.onModelChange(this.values);\n        this.onChange.emit({\n          event: event,\n          values: this.values\n        });\n      } else {\n        if (val < this.min) {\n          val = this.min;\n          this.handleValue = 0;\n        } else if (val > this.max) {\n          val = this.max;\n          this.handleValue = 100;\n        }\n\n        this.value = this.getNormalizedValue(val);\n        this.onModelChange(this.value);\n        this.onChange.emit({\n          event: event,\n          value: this.value\n        });\n        this.sliderHandle.nativeElement.focus();\n      }\n    }\n\n    getValueFromHandle(handleValue) {\n      return (this.max - this.min) * (handleValue / 100) + this.min;\n    }\n\n    getDecimalsCount(value) {\n      if (value && Math.floor(value) !== value) return value.toString().split(\".\")[1].length || 0;\n      return 0;\n    }\n\n    getNormalizedValue(val) {\n      let decimalsCount = this.getDecimalsCount(this.step);\n\n      if (decimalsCount > 0) {\n        return +val.toFixed(decimalsCount);\n      } else {\n        return Math.floor(val);\n      }\n    }\n\n    ngOnDestroy() {\n      this.unbindDragListeners();\n    }\n\n  }\n\n  Slider.ɵfac = function Slider_Factory(t) {\n    return new (t || Slider)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  Slider.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: Slider,\n    selectors: [[\"p-slider\"]],\n    viewQuery: function Slider_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n        ɵngcc0.ɵɵviewQuery(_c1, 5);\n        ɵngcc0.ɵɵviewQuery(_c2, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.sliderHandle = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.sliderHandleStart = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.sliderHandleEnd = _t.first);\n      }\n    },\n    inputs: {\n      min: \"min\",\n      max: \"max\",\n      orientation: \"orientation\",\n      tabindex: \"tabindex\",\n      disabled: \"disabled\",\n      animate: \"animate\",\n      step: \"step\",\n      range: \"range\",\n      style: \"style\",\n      styleClass: \"styleClass\",\n      ariaLabelledBy: \"ariaLabelledBy\"\n    },\n    outputs: {\n      onChange: \"onChange\",\n      onSlideEnd: \"onSlideEnd\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([SLIDER_VALUE_ACCESSOR])],\n    decls: 8,\n    vars: 16,\n    consts: [[3, \"ngStyle\", \"ngClass\", \"click\"], [\"class\", \"p-slider-range\", 3, \"ngStyle\", 4, \"ngIf\"], [\"class\", \"p-slider-handle\", 3, \"transition\", \"ngStyle\", \"keydown\", \"mousedown\", \"touchstart\", \"touchmove\", \"touchend\", 4, \"ngIf\"], [\"class\", \"p-slider-handle\", 3, \"transition\", \"ngStyle\", \"ngClass\", \"keydown\", \"mousedown\", \"touchstart\", \"touchmove\", \"touchend\", 4, \"ngIf\"], [1, \"p-slider-range\", 3, \"ngStyle\"], [1, \"p-slider-handle\", 3, \"ngStyle\", \"keydown\", \"mousedown\", \"touchstart\", \"touchmove\", \"touchend\"], [\"sliderHandle\", \"\"], [1, \"p-slider-handle\", 3, \"ngStyle\", \"ngClass\", \"keydown\", \"mousedown\", \"touchstart\", \"touchmove\", \"touchend\"], [\"sliderHandleStart\", \"\"], [\"sliderHandleEnd\", \"\"]],\n    template: function Slider_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"click\", function Slider_Template_div_click_0_listener($event) {\n          return ctx.onBarClick($event);\n        });\n        ɵngcc0.ɵɵtemplate(1, Slider_span_1_Template, 1, 4, \"span\", 1);\n        ɵngcc0.ɵɵtemplate(2, Slider_span_2_Template, 1, 4, \"span\", 1);\n        ɵngcc0.ɵɵtemplate(3, Slider_span_3_Template, 1, 3, \"span\", 1);\n        ɵngcc0.ɵɵtemplate(4, Slider_span_4_Template, 1, 3, \"span\", 1);\n        ɵngcc0.ɵɵtemplate(5, Slider_span_5_Template, 2, 11, \"span\", 2);\n        ɵngcc0.ɵɵtemplate(6, Slider_span_6_Template, 2, 14, \"span\", 3);\n        ɵngcc0.ɵɵtemplate(7, Slider_span_7_Template, 2, 14, \"span\", 3);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassMap(ctx.styleClass);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx.style)(\"ngClass\", ɵngcc0.ɵɵpureFunction4(11, _c9, ctx.disabled, ctx.orientation == \"horizontal\", ctx.orientation == \"vertical\", ctx.animate));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.range && ctx.orientation == \"horizontal\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.range && ctx.orientation == \"vertical\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.range && ctx.orientation == \"vertical\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.range && ctx.orientation == \"horizontal\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.range);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.range);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.range);\n      }\n    },\n    directives: [ɵngcc1.NgStyle, ɵngcc1.NgClass, ɵngcc1.NgIf],\n    styles: [\".p-slider{position:relative}.p-slider .p-slider-handle{-ms-touch-action:none;cursor:-webkit-grab;cursor:grab;touch-action:none}.p-slider-range,.p-slider .p-slider-handle{display:block;position:absolute}.p-slider-horizontal .p-slider-range{height:100%;left:0;top:0}.p-slider-horizontal .p-slider-handle{top:50%}.p-slider-vertical{height:100px}.p-slider-vertical .p-slider-handle{left:50%}.p-slider-vertical .p-slider-range{bottom:0;left:0;width:100%}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return Slider;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet SliderModule = /*#__PURE__*/(() => {\n  class SliderModule {}\n\n  SliderModule.ɵfac = function SliderModule_Factory(t) {\n    return new (t || SliderModule)();\n  };\n\n  SliderModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: SliderModule\n  });\n  SliderModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return SliderModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SliderModule, {\n    declarations: function () {\n      return [Slider];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [Slider];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { SLIDER_VALUE_ACCESSOR, Slider, SliderModule }; //# sourceMappingURL=primeng-slider.js.map","map":null,"metadata":{},"sourceType":"module"}