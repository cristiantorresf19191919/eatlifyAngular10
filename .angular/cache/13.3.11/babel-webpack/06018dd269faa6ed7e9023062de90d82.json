{"ast":null,"code":"import { Directive, ElementRef, Component, Renderer2, Input, HostBinding, VERSION, EventEmitter, ContentChildren, ContentChild, Output, Inject, PLATFORM_ID, InjectionToken, NgModule } from '@angular/core';\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Returns true if the given string begins with a left curly brace and ends with a right curly brace, e.g.\n * \"{asdas d}\" will return true, \"asdasd}\" will return false.\n *\n * this function does not validate the correctness of the string content other than the first and last character\n * \\@param str\n * \\@return boolean\n * @type {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction CloudinaryImage_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"display\", ctx_r0.shouldShowPlaceHolder ? \"inline\" : \"none\");\n  }\n}\n\nconst _c0 = [\"*\"];\n\nconst isJsonLikeString = function (str) {\n  // [\\s\\S] allows the string to contain new lines\n  return str && typeof str === 'string' && str.trim().match(/^{[\\s\\S]*?}$/) !== null;\n};\n\nconst ɵ0 = isJsonLikeString;\n/** @type {?} */\n\nconst isArrayLikeString = function (str) {\n  return str && typeof str === 'string' && str.trim().match(/^\\[[\\s\\S]*?]$/) !== null;\n};\n\nconst ɵ1 = isArrayLikeString;\n/** @type {?} */\n\nconst isNamedNodeMap = function (obj) {\n  return obj && (obj.constructor.name === 'NamedNodeMap' || obj instanceof NamedNodeMap);\n};\n\nconst ɵ2 = isNamedNodeMap;\n/** @type {?} */\n\nconst namedNodeMapToObject = function (source) {\n  /** @type {?} */\n  let target = {};\n  Object.keys(source).forEach(index => {\n    /** @type {?} */\n    const name = source[index].name;\n    /** @type {?} */\n\n    const value = source[index].value;\n    target[name] = value;\n  });\n  return target;\n};\n\nconst ɵ3 = namedNodeMapToObject;\n/** @type {?} */\n\nconst transformKeyNames = function (obj) {\n  /** @type {?} */\n  let _obj = obj;\n\n  if (isJsonLikeString(obj) || isArrayLikeString(obj)) {\n    // Given attribute value is in the form of a JSON object -\n    // Transforms the string into an object or array, as the Javascript API expects\n    if (isArrayLikeString(obj)) {\n      obj = obj.replace(/'/g, '\"');\n    }\n\n    _obj = JSON.parse(obj);\n  } else if (isNamedNodeMap(obj)) {\n    _obj = namedNodeMapToObject(obj);\n  }\n\n  if (Array.isArray(_obj)) {\n    // Transform all the array values (e.g. transformation array)\n    _obj = _obj.map(currentValue => {\n      return transformKeyNames(currentValue);\n    });\n  } else if (typeof _obj === 'object') {\n    Object.keys(_obj).forEach(key => {\n      // Replace the key name with the snake_case\n      // Then strip cld prefix if it exists (with an optional dash or underscore)\n\n      /** @type {?} */\n      const kebabKey = key.replace(/-/g, '_').toLocaleLowerCase().replace(/^cld(-|_)?/, '');\n      /** @type {?} */\n\n      const kebabValue = transformKeyNames(_obj[key]);\n      delete _obj[key];\n      _obj[kebabKey] = kebabValue;\n    });\n  }\n\n  return _obj;\n};\n\nconst ɵ4 = transformKeyNames;\n\nclass Cloudinary {\n  /**\n   * @param {?} cloudinaryJsLib\n   * @param {?} configuration\n   */\n  constructor(cloudinaryJsLib, configuration) {\n    // Cloudinary JS already clones the given configuration so no need to clone it here too\n    if (cloudinaryJsLib.CloudinaryJQuery) {\n      this._cloudinaryInstance = new cloudinaryJsLib.CloudinaryJQuery(configuration);\n    } else {\n      this._cloudinaryInstance = new cloudinaryJsLib.Cloudinary(configuration);\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get cloudinaryInstance() {\n    return this._cloudinaryInstance;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  config() {\n    return this._cloudinaryInstance.config();\n  }\n  /**\n   * @param {?} configuration\n   * @return {?}\n   */\n\n\n  updateConfig(configuration) {\n    this._cloudinaryInstance.config(configuration);\n  }\n  /**\n   * @param {...?} parameters\n   * @return {?}\n   */\n\n\n  url(...parameters) {\n    return this._cloudinaryInstance.url(...parameters);\n  }\n  /**\n   * @param {...?} parameters\n   * @return {?}\n   */\n\n\n  imageTag(...parameters) {\n    return this._cloudinaryInstance.imageTag(...parameters);\n  }\n  /**\n   * @param {...?} parameters\n   * @return {?}\n   */\n\n\n  videoTag(...parameters) {\n    return this._cloudinaryInstance.videoTag(...parameters);\n  }\n  /**\n   * @param {?} img\n   * @param {?} options\n   * @return {?}\n   */\n\n\n  responsive(img, options) {\n    // Cloudinary underlying JS library will handle responsive behavior\n    this._cloudinaryInstance.cloudinary_update(img, options);\n\n    this._cloudinaryInstance.responsive(options, false);\n  }\n  /**\n   * Transforms a set of attributes and chained transformations to an options object that can be consumed by Cloudinary JS API\n   * @param {?} attributes HTML element attributes\n   * @param {?=} childTransformations QueryList with the element's <cl-transformation> children for chained transformations\n   * @return {?} An options object that can be consumed by Cloudinary JS API\n   */\n\n\n  toCloudinaryAttributes(attributes, childTransformations) {\n    /** @type {?} */\n    const options = transformKeyNames(attributes); // Add chained transformations\n\n    if (childTransformations && childTransformations.length > 0) {\n      options.transformation = []; // Support chained transformations\n\n      childTransformations.forEach(transformation => {\n        options.transformation.push(this.toCloudinaryAttributes(transformation.getAttributes()));\n      });\n    } // Add responsiveness\n\n\n    if (options.responsive === '' || options.responsive === 'true' || options.responsive === true) {\n      options.responsive = true;\n    }\n\n    return options;\n  }\n\n}\n\nif (false) {\n  /** @type {?} */\n  Cloudinary.prototype._cloudinaryInstance;\n  /* Skipping unhandled member: ;*/\n}\n/* Return a provider object that creates our configurable service */\n\n/**\n * @param {?} cloudinaryJsLib\n * @param {?} configuration\n * @return {?}\n */\n\n\nfunction provideCloudinary(cloudinaryJsLib, configuration) {\n  return {\n    provide: Cloudinary,\n    useFactory: () => new Cloudinary(cloudinaryJsLib, configuration)\n  };\n}\n\n;\n/** @type {?} */\n\nconst isBrowser = function () {\n  return typeof window !== 'undefined';\n} // For unit tests\n;\n\nconst ɵ5 = isBrowser;\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nlet CloudinaryTransformationDirective = /*#__PURE__*/(() => {\n  class CloudinaryTransformationDirective {\n    /**\n     * @param {?} el\n     */\n    constructor(el) {\n      this.el = el;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    getAttributes() {\n      return this.el.nativeElement.attributes;\n    }\n\n  }\n\n  CloudinaryTransformationDirective.ɵfac = function CloudinaryTransformationDirective_Factory(t) {\n    return new (t || CloudinaryTransformationDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  CloudinaryTransformationDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CloudinaryTransformationDirective,\n    selectors: [[\"cl-transformation\"]]\n  });\n  /** @nocollapse */\n\n  return CloudinaryTransformationDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  CloudinaryTransformationDirective.prototype.el;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet CloudinaryPlaceHolder = /*#__PURE__*/(() => {\n  class CloudinaryPlaceHolder {\n    /**\n     * @param {?} cloudinary\n     * @param {?} renderer\n     * @param {?} el\n     */\n    constructor(cloudinary, renderer, el) {\n      this.cloudinary = cloudinary;\n      this.renderer = renderer;\n      this.el = el;\n      this.options = {};\n    }\n    /**\n     * @param {?} width\n     * @return {?}\n     */\n\n\n    setWidth(width) {\n      this.itemWidth = width;\n    }\n    /**\n     * @param {?} height\n     * @return {?}\n     */\n\n\n    setHeight(height) {\n      this.itemHeight = height;\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n\n\n    setPublicId(id) {\n      this.publicId = id;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterContentChecked() {\n      /** @type {?} */\n      const imageTag = this.cloudinary.imageTag(this.publicId, this.options);\n      this.setElementAttributes(this.el.nativeElement.children[0], imageTag.attributes());\n      this.placeholderImg = this.getPlaceholderImage();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    getPlaceholderImage() {\n      if (this.type === 'predominant-color' && this.itemHeight && this.itemWidth) {\n        return this.cloudinary.url(this.publicId, Object.assign({\n          placeholder: 'predominant-color-pixel' || true\n        }, this.options));\n      } else {\n        return this.cloudinary.url(this.publicId, Object.assign({\n          placeholder: this.type || true\n        }, this.options));\n      }\n    }\n    /**\n     * @param {?} element\n     * @param {?} attributesLiteral\n     * @return {?}\n     */\n\n\n    setElementAttributes(element, attributesLiteral) {\n      Object.keys(attributesLiteral).forEach(attrName => {\n        if (attrName !== 'src' && attrName !== 'style') {\n          this.renderer.setAttribute(element, attrName, attributesLiteral[attrName]);\n        }\n      });\n    }\n\n  }\n\n  CloudinaryPlaceHolder.ɵfac = function CloudinaryPlaceHolder_Factory(t) {\n    return new (t || CloudinaryPlaceHolder)(ɵngcc0.ɵɵdirectiveInject(Cloudinary), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  CloudinaryPlaceHolder.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: CloudinaryPlaceHolder,\n    selectors: [[\"cl-placeholder\"]],\n    hostVars: 5,\n    hostBindings: function CloudinaryPlaceHolder_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"public-id\", ctx.publicId);\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.itemWidth)(\"height\", ctx.itemHeight);\n      }\n    },\n    inputs: {\n      type: \"type\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"src\"]],\n    template: function CloudinaryPlaceHolder_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"img\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"src\", ctx.placeholderImg, ɵngcc0.ɵɵsanitizeUrl);\n      }\n    },\n    encapsulation: 2\n  });\n  /** @nocollapse */\n\n  return CloudinaryPlaceHolder;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  CloudinaryPlaceHolder.prototype.type;\n  /** @type {?} */\n\n  CloudinaryPlaceHolder.prototype.itemWidth;\n  /** @type {?} */\n\n  CloudinaryPlaceHolder.prototype.itemHeight;\n  /** @type {?} */\n\n  CloudinaryPlaceHolder.prototype.publicId;\n  /** @type {?} */\n\n  CloudinaryPlaceHolder.prototype.options;\n  /** @type {?} */\n\n  CloudinaryPlaceHolder.prototype.placeholderImg;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CloudinaryPlaceHolder.prototype.cloudinary;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CloudinaryPlaceHolder.prototype.renderer;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CloudinaryPlaceHolder.prototype.el;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nlet APP_VERSION = '1.5.0';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nlet SDKAnalyticsConstants = {\n  sdkSemver: APP_VERSION,\n  techVersion: VERSION.full,\n  sdkCode: 'K'\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nlet CloudinaryImage = /*#__PURE__*/(() => {\n  class CloudinaryImage {\n    /**\n     * @param {?} el\n     * @param {?} cloudinary\n     * @param {?} renderer\n     */\n    constructor(el, cloudinary, renderer) {\n      this.el = el;\n      this.cloudinary = cloudinary;\n      this.renderer = renderer;\n      this.onLoad = new EventEmitter(); // Callback when an image is loaded successfully\n      // Callback when an image is loaded successfully\n\n      this.onError = new EventEmitter(); // Callback when an image is loaded with error\n\n      this.shouldShowPlaceHolder = true;\n      this.options = {};\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      if (isBrowser()) {\n        // Create an observer instance\n        this.observer = new MutationObserver(() => {\n          this.loadImage();\n        }); // Observe changes to attributes or child transformations to re-render the image\n\n        /** @type {?} */\n\n        const config = {\n          attributes: true,\n          childList: true\n        }; // pass in the target node, as well as the observer options\n\n        this.observer.observe(this.el.nativeElement, config);\n      }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    ngOnChanges(changes) {\n      // Listen to changes on the data-bound property 'publicId'.\n      // Update component unless this is the first value assigned.\n      if (changes.publicId && !changes.publicId.isFirstChange()) {\n        this.loadImage();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      if (this.observer && this.observer.disconnect) {\n        this.observer.disconnect();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterViewInit() {\n      this.loadImage();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterContentChecked() {\n      if (this.width && this.placeholderComponent) {\n        this.placeholderComponent.setWidth(this.width);\n      }\n\n      if (this.height && this.placeholderComponent) {\n        this.placeholderComponent.setHeight(this.height);\n      }\n\n      if (this.placeholderComponent) {\n        this.placeholderComponent.setPublicId(this.publicId);\n      }\n    }\n    /**\n     * appends opacity and position to cl-img->img when placeholder is displayed\n     * removes styling from cl-img->img when placeholder does not display\n     * @return {?}\n     */\n\n\n    setPlaceHolderStyle() {\n      if (this.shouldShowPlaceHolder) {\n        this.renderer.setStyle(this.el.nativeElement.children[0], 'opacity', '0');\n        this.renderer.setStyle(this.el.nativeElement.children[0], 'position', 'absolute');\n      } else {\n        // note this only removes styling from cl-img->img and not cl-img\n        this.renderer.removeAttribute(this.el.nativeElement.children[0], 'style');\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    hasLoaded() {\n      this.shouldShowPlaceHolder = false;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    loadImage() {\n      // https://github.com/angular/universal#universal-gotchas\n      // Fetch the image only for client side rendering by the browser\n      if (isBrowser()) {\n        if (!this.publicId) {\n          throw new Error('You must set the public id of the image to load, e.g. <cl-image public-id={{photo.public_id}}...></cl-image>');\n        }\n        /** @type {?} */\n\n\n        const nativeElement = this.el.nativeElement;\n        /** @type {?} */\n\n        const image = nativeElement.children[0]; // Add onload and onerror handlers\n\n        image.onload = e => {\n          this.onLoad.emit(e);\n        };\n\n        image.onerror = e => {\n          this.onError.emit(e);\n        };\n\n        this.options = this.cloudinary.toCloudinaryAttributes(nativeElement.attributes, this.transformations);\n\n        if (this.clientHints || typeof this.clientHints === 'undefined' && this.cloudinary.config().client_hints) {\n          delete this.options['class'];\n          delete this.options['data-src'];\n          delete this.options['responsive'];\n        }\n\n        if (this.cloudinary.config().urlAnalytics) {\n          this.options = Object.assign({}, SDKAnalyticsConstants, this.options);\n        }\n\n        if (this.placeholderComponent) {\n          this.placeholderHandler(this.options, image);\n        }\n\n        if (this.accessibility) {\n          this.options['src'] = this.accessibilityModeHandler();\n        }\n        /** @type {?} */\n\n\n        const imageTag = this.cloudinary.imageTag(this.publicId, this.options);\n        this.setElementAttributes(image, imageTag.attributes());\n\n        if (this.options['responsive']) {\n          this.cloudinary.responsive(image, this.options);\n        }\n      }\n    }\n    /**\n     * @param {?} element\n     * @param {?} attributesLiteral\n     * @return {?}\n     */\n\n\n    setElementAttributes(element, attributesLiteral) {\n      Object.keys(attributesLiteral).forEach(attrName => {\n        /** @type {?} */\n        const attr = attrName === 'src' && this.loading === 'lazy' ? 'data-src' : attrName;\n        this.renderer.setAttribute(element, attr, attributesLiteral[attrName]);\n      }); // Enforcing placeholder style\n\n      if (this.placeholderComponent) {\n        this.setPlaceHolderStyle();\n      }\n    }\n    /**\n     * Handles placeholder options\n     * In case of responsive sets width from resize\n     * In case width or height is known takes 10% of original dimension\n     * @param {?} options\n     * @param {?} image\n     * @return {?}\n     */\n\n\n    placeholderHandler(options, image) {\n      /** @type {?} */\n      const placeholderOptions = Object.assign({}, options);\n\n      if (placeholderOptions['width']) {\n        if (placeholderOptions['width'] === 'auto') {\n          placeholderOptions['width'] = image.getAttribute('data-width');\n        }\n      }\n\n      this.placeholderComponent.options = placeholderOptions;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    accessibilityModeHandler() {\n      return this.cloudinary.url(this.publicId, Object.assign({\n        accessibility: this.accessibility\n      }, this.options));\n    }\n\n  }\n\n  CloudinaryImage.ɵfac = function CloudinaryImage_Factory(t) {\n    return new (t || CloudinaryImage)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(Cloudinary), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n  };\n\n  CloudinaryImage.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: CloudinaryImage,\n    selectors: [[\"cl-image\"]],\n    contentQueries: function CloudinaryImage_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CloudinaryPlaceHolder, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CloudinaryTransformationDirective, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.placeholderComponent = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.transformations = _t);\n      }\n    },\n    inputs: {\n      publicId: [\"public-id\", \"publicId\"],\n      clientHints: [\"client-hints\", \"clientHints\"],\n      loading: \"loading\",\n      width: \"width\",\n      height: \"height\",\n      accessibility: \"accessibility\"\n    },\n    outputs: {\n      onLoad: \"onLoad\",\n      onError: \"onError\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 1,\n    consts: [[3, \"load\"], [3, \"display\", 4, \"ngIf\"]],\n    template: function CloudinaryImage_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"img\", 0);\n        ɵngcc0.ɵɵlistener(\"load\", function CloudinaryImage_Template_img_load_0_listener() {\n          return ctx.hasLoaded();\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(1, CloudinaryImage_div_1_Template, 2, 2, \"div\", 1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.placeholderComponent && ctx.shouldShowPlaceHolder);\n      }\n    },\n    directives: [ɵngcc1.NgIf],\n    encapsulation: 2\n  });\n  /** @nocollapse */\n\n  return CloudinaryImage;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  CloudinaryImage.prototype.publicId;\n  /** @type {?} */\n\n  CloudinaryImage.prototype.clientHints;\n  /** @type {?} */\n\n  CloudinaryImage.prototype.loading;\n  /** @type {?} */\n\n  CloudinaryImage.prototype.width;\n  /** @type {?} */\n\n  CloudinaryImage.prototype.height;\n  /** @type {?} */\n\n  CloudinaryImage.prototype.accessibility;\n  /** @type {?} */\n\n  CloudinaryImage.prototype.transformations;\n  /** @type {?} */\n\n  CloudinaryImage.prototype.placeholderComponent;\n  /** @type {?} */\n\n  CloudinaryImage.prototype.onLoad;\n  /** @type {?} */\n\n  CloudinaryImage.prototype.onError;\n  /** @type {?} */\n\n  CloudinaryImage.prototype.observer;\n  /** @type {?} */\n\n  CloudinaryImage.prototype.shouldShowPlaceHolder;\n  /** @type {?} */\n\n  CloudinaryImage.prototype.options;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CloudinaryImage.prototype.el;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CloudinaryImage.prototype.cloudinary;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CloudinaryImage.prototype.renderer;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// See also video reference - http://cloudinary.com/documentation/video_manipulation_and_delivery#video_transformations_reference\n\n\nlet CloudinaryVideo = /*#__PURE__*/(() => {\n  class CloudinaryVideo {\n    /**\n     * @param {?} el\n     * @param {?} cloudinary\n     * @param {?} platformId\n     */\n    constructor(el, cloudinary, platformId) {\n      this.el = el;\n      this.cloudinary = cloudinary;\n      this.platformId = platformId;\n      this.play = new EventEmitter();\n      this.loadstart = new EventEmitter();\n      this.playing = new EventEmitter();\n      this.error = new EventEmitter();\n      this.ended = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      if (typeof MutationObserver !== 'undefined') {\n        // Create an observer instance\n        this.observer = new MutationObserver(() => {\n          this.loadVideo(this.publicId);\n        }); // Observe changes to attributes or child transformations to re-render the image\n\n        /** @type {?} */\n\n        const config = {\n          attributes: true,\n          childList: true\n        }; // pass in the target node, as well as the observer options\n\n        this.observer.observe(this.el.nativeElement, config);\n      }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    ngOnChanges(changes) {\n      // Listen to changes on the data-bound property 'publicId'.\n      // Update component unless this is the first value assigned.\n      if (changes.publicId && !changes.publicId.isFirstChange()) {\n        this.loadVideo(changes.publicId.currentValue);\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      if (this.observer && this.observer.disconnect) {\n        this.observer.disconnect();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterViewInit() {\n      if (!this.publicId) {\n        throw new Error('You must set the public id of the video to load, e.g. <cl-video public-id={{video.public_id}}...></cl-video>');\n      }\n\n      this.loadVideo(this.publicId);\n    }\n    /**\n     * @param {?} publicId\n     * @return {?}\n     */\n\n\n    loadVideo(publicId) {\n      // https://github.com/angular/universal#universal-gotchas\n      if (isPlatformBrowser(this.platformId)) {\n        /** @type {?} */\n        const nativeElement = this.el.nativeElement;\n        /** @type {?} */\n\n        const video = nativeElement.children[0];\n        /** @type {?} */\n\n        const options = this.cloudinary.toCloudinaryAttributes(nativeElement.attributes, this.transformations);\n        /** @type {?} */\n\n        const videoTag = this.cloudinary.videoTag(publicId, options); // Replace template with the custom video tag created by Cloudinary\n\n        this.appendSourceElements(video, videoTag.content()); // Add attributes\n\n        this.setElementAttributes(video, videoTag.attributes());\n      }\n    }\n    /**\n     * @param {?} element\n     * @param {?} attributesLiteral\n     * @return {?}\n     */\n\n\n    setElementAttributes(element, attributesLiteral) {\n      Object.keys(attributesLiteral).forEach(attrName => {\n        element.setAttribute(attrName, attributesLiteral[attrName]);\n      });\n    }\n    /**\n     * @param {?} element\n     * @param {?} html\n     * @return {?}\n     */\n\n\n    appendSourceElements(element, html) {\n      /** @type {?} */\n      const fragment = document.createDocumentFragment();\n      element.innerHTML = html;\n\n      while (element.childNodes[0]) {\n        fragment.appendChild(element.childNodes[0]);\n      }\n\n      element.appendChild(fragment);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    emitPlayEvent() {\n      this.play.emit();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    emitLoadstartEvent() {\n      this.loadstart.emit();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    emitPlayingEvent() {\n      this.playing.emit();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    emitErrorEvent() {\n      this.error.emit();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    emitEndedEvent() {\n      this.ended.emit();\n    }\n\n  }\n\n  CloudinaryVideo.ɵfac = function CloudinaryVideo_Factory(t) {\n    return new (t || CloudinaryVideo)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(Cloudinary), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  CloudinaryVideo.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: CloudinaryVideo,\n    selectors: [[\"cl-video\"]],\n    contentQueries: function CloudinaryVideo_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CloudinaryTransformationDirective, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.transformations = _t);\n      }\n    },\n    inputs: {\n      publicId: [\"public-id\", \"publicId\"]\n    },\n    outputs: {\n      play: \"play\",\n      loadstart: \"loadstart\",\n      playing: \"playing\",\n      error: \"error\",\n      ended: \"ended\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[3, \"play\", \"loadstart\", \"playing\", \"error\", \"ended\"]],\n    template: function CloudinaryVideo_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"video\", 0);\n        ɵngcc0.ɵɵlistener(\"play\", function CloudinaryVideo_Template_video_play_0_listener() {\n          return ctx.emitPlayEvent();\n        })(\"loadstart\", function CloudinaryVideo_Template_video_loadstart_0_listener() {\n          return ctx.emitLoadstartEvent();\n        })(\"playing\", function CloudinaryVideo_Template_video_playing_0_listener() {\n          return ctx.emitPlayingEvent();\n        })(\"error\", function CloudinaryVideo_Template_video_error_0_listener() {\n          return ctx.emitErrorEvent;\n        })(\"ended\", function CloudinaryVideo_Template_video_ended_0_listener() {\n          return ctx.emitEndedEvent;\n        });\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n  /** @nocollapse */\n\n  return CloudinaryVideo;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  CloudinaryVideo.prototype.publicId;\n  /** @type {?} */\n\n  CloudinaryVideo.prototype.play;\n  /** @type {?} */\n\n  CloudinaryVideo.prototype.loadstart;\n  /** @type {?} */\n\n  CloudinaryVideo.prototype.playing;\n  /** @type {?} */\n\n  CloudinaryVideo.prototype.error;\n  /** @type {?} */\n\n  CloudinaryVideo.prototype.ended;\n  /** @type {?} */\n\n  CloudinaryVideo.prototype.transformations;\n  /** @type {?} */\n\n  CloudinaryVideo.prototype.observer;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CloudinaryVideo.prototype.el;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CloudinaryVideo.prototype.cloudinary;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CloudinaryVideo.prototype.platformId;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet CloudinaryImageSourceDirective = /*#__PURE__*/(() => {\n  class CloudinaryImageSourceDirective {\n    /**\n     * @param {?} el\n     * @param {?} cloudinary\n     */\n    constructor(el, cloudinary) {\n      this.el = el;\n      this.cloudinary = cloudinary;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterViewInit() {\n      if (isBrowser()) {\n        /** @type {?} */\n        let attrName;\n        /** @type {?} */\n\n        let propertyValue;\n\n        if (this.clHref) {\n          attrName = 'href';\n          propertyValue = this.clHref;\n        } else if (this.clSrc) {\n          attrName = 'src';\n          propertyValue = this.clSrc;\n        } else if (this.clSrcset) {\n          attrName = 'srcset';\n          propertyValue = this.clSrcset;\n        }\n        /** @type {?} */\n\n\n        let isSvg = false;\n\n        if (this.clHref && toString.call(this.el.nativeElement['href'] === '[object SVGAnimatedString]')) {\n          this.el.nativeElement.setAttribute('xlinkHref', 'xlink:href');\n          isSvg = true;\n        }\n\n        if (!attrName || !propertyValue) {\n          throw new Error('Directive value is missing for clHref/clSrc/clSrcset');\n        }\n        /** @type {?} */\n\n\n        const nativeElement = this.el.nativeElement;\n        /** @type {?} */\n\n        const options = this.cloudinary.toCloudinaryAttributes(nativeElement.attributes, this.transformations);\n        /** @type {?} */\n\n        const attrValue = this.cloudinary.url(propertyValue, options);\n        this.el.nativeElement.setAttribute(attrName, attrValue);\n        /*\n                 on IE, if \"ngSrc\" directive declaration is used and \"src\" attribute doesn't exist\n                 then calling element.setAttribute('src', 'foo') doesn't do anything, so we need\n                 to set the property as well to achieve the desired effect.\n        \n                 Check for IE: http://stackoverflow.com/a/32139375/198095\n                 if is IE then documentMode contains IE version\n                 */\n\n        /** @type {?} */\n\n        const msie = this.el.nativeElement.ownerDocument.documentMode;\n\n        if (msie && !isSvg) {\n          // IE logic here\n          this.el.nativeElement[attrName] = attrValue;\n        }\n      }\n    }\n\n  }\n\n  CloudinaryImageSourceDirective.ɵfac = function CloudinaryImageSourceDirective_Factory(t) {\n    return new (t || CloudinaryImageSourceDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(Cloudinary));\n  };\n\n  CloudinaryImageSourceDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CloudinaryImageSourceDirective,\n    selectors: [[\"\", \"clHref\", \"\"], [\"\", \"clSrc\", \"\"], [\"\", \"clSrcset\", \"\"]],\n    contentQueries: function CloudinaryImageSourceDirective_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CloudinaryTransformationDirective, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.transformations = _t);\n      }\n    },\n    inputs: {\n      clHref: \"clHref\",\n      clSrc: \"clSrc\",\n      clSrcset: \"clSrcset\"\n    }\n  });\n  /** @nocollapse */\n\n  return CloudinaryImageSourceDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  CloudinaryImageSourceDirective.prototype.clHref;\n  /** @type {?} */\n\n  CloudinaryImageSourceDirective.prototype.clSrc;\n  /** @type {?} */\n\n  CloudinaryImageSourceDirective.prototype.clSrcset;\n  /** @type {?} */\n\n  CloudinaryImageSourceDirective.prototype.transformations;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CloudinaryImageSourceDirective.prototype.el;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CloudinaryImageSourceDirective.prototype.cloudinary;\n  /* Skipping unhandled member: ;*/\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet CloudinaryBackgroundImageDirective = /*#__PURE__*/(() => {\n  class CloudinaryBackgroundImageDirective {\n    /**\n     * @param {?} renderer\n     * @param {?} el\n     * @param {?} cloudinary\n     */\n    constructor(renderer, el, cloudinary) {\n      this.renderer = renderer;\n      this.el = el;\n      this.cloudinary = cloudinary;\n      this.position = 'center';\n    }\n    /**\n     * @return {?}\n     */\n\n\n    isBrowser() {\n      return typeof window !== 'undefined';\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterViewInit() {\n      if (this.isBrowser()) {\n        /** @type {?} */\n        const nativeElement = this.el.nativeElement;\n        /** @type {?} */\n\n        const options = this.cloudinary.toCloudinaryAttributes(nativeElement.attributes, this.transformations);\n        /** @type {?} */\n\n        const imageUrl = this.cloudinary.url(this.clBackgroundImage, options);\n        this.renderer.setStyle(nativeElement, 'background-image', `url('${imageUrl}')`);\n        this.renderer.setStyle(nativeElement, 'background-repeat', 'no-repeat');\n        this.renderer.setStyle(nativeElement, 'background-position', this.position);\n      }\n    }\n\n  }\n\n  CloudinaryBackgroundImageDirective.ɵfac = function CloudinaryBackgroundImageDirective_Factory(t) {\n    return new (t || CloudinaryBackgroundImageDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(Cloudinary));\n  };\n\n  CloudinaryBackgroundImageDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CloudinaryBackgroundImageDirective,\n    selectors: [[\"\", \"clBackgroundImage\", \"\"]],\n    contentQueries: function CloudinaryBackgroundImageDirective_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CloudinaryTransformationDirective, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.transformations = _t);\n      }\n    },\n    inputs: {\n      position: \"position\",\n      clBackgroundImage: \"clBackgroundImage\"\n    }\n  });\n  /** @nocollapse */\n\n  return CloudinaryBackgroundImageDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  CloudinaryBackgroundImageDirective.prototype.clBackgroundImage;\n  /** @type {?} */\n\n  CloudinaryBackgroundImageDirective.prototype.position;\n  /** @type {?} */\n\n  CloudinaryBackgroundImageDirective.prototype.transformations;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CloudinaryBackgroundImageDirective.prototype.renderer;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CloudinaryBackgroundImageDirective.prototype.el;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CloudinaryBackgroundImageDirective.prototype.cloudinary;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet LazyLoadDirective = /*#__PURE__*/(() => {\n  class LazyLoadDirective {\n    /**\n     * @param {?} el\n     */\n    constructor(el) {\n      this.el = el;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterViewInit() {\n      if (isBrowser()) {\n        if (!this.isNativeLazyLoadSupported() && this.isLazyLoadSupported()) {\n          this.lazyLoad();\n        } else {\n          this.loadImage();\n        }\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    loadImage() {\n      /** @type {?} */\n      const nativeElement = this.el.nativeElement;\n      /** @type {?} */\n\n      const image = nativeElement.children[0];\n      image.setAttribute('src', image.dataset.src);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    isLazyLoadSupported() {\n      return window && 'IntersectionObserver' in window;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    isNativeLazyLoadSupported() {\n      return 'loading' in HTMLImageElement.prototype; // check loading property is defined on image or iframe\n    }\n    /**\n     * @return {?}\n     */\n\n\n    lazyLoad() {\n      /** @type {?} */\n      const options = {\n        rootMargin: `0px 0px -50% 0px`\n      };\n      /** @type {?} */\n\n      const observer = new IntersectionObserver(entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            this.loadImage();\n            observer.unobserve(entry.target);\n          }\n        }, options);\n      });\n      observer.observe(this.el.nativeElement);\n    }\n\n  }\n\n  LazyLoadDirective.ɵfac = function LazyLoadDirective_Factory(t) {\n    return new (t || LazyLoadDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  LazyLoadDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: LazyLoadDirective,\n    selectors: [[\"cl-image\", \"loading\", \"lazy\"]]\n  });\n  /** @nocollapse */\n\n  return LazyLoadDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  LazyLoadDirective.prototype.el;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\n'use strict';\n/** @type {?} */\n\n\nconst CLOUDINARY_LIB = new InjectionToken('CLOUDINARY_LIB');\n/** @type {?} */\n\nconst CLOUDINARY_CONFIGURATION = new InjectionToken('CLOUDINARY_CONFIGURATION'); // Export this function to Angular's AOT to work\n\n/**\n * @param {?} cloudinaryJsLib\n * @param {?} configuration\n * @return {?}\n */\n\nfunction createCloudinary(cloudinaryJsLib, configuration) {\n  return new Cloudinary(cloudinaryJsLib, configuration);\n}\n\n;\nlet CloudinaryModule = /*#__PURE__*/(() => {\n  class CloudinaryModule {\n    /**\n     * @param {?} cloudinaryJsLib\n     * @param {?} cloudinaryConfiguration\n     * @return {?}\n     */\n    static forRoot(cloudinaryJsLib, cloudinaryConfiguration) {\n      return {\n        ngModule: CloudinaryModule,\n        providers: [{\n          provide: CLOUDINARY_LIB,\n          useValue: cloudinaryJsLib\n        }, {\n          provide: CLOUDINARY_CONFIGURATION,\n          useValue: cloudinaryConfiguration\n        }, {\n          provide: Cloudinary,\n          useFactory: createCloudinary,\n          deps: [CLOUDINARY_LIB, CLOUDINARY_CONFIGURATION]\n        }]\n      };\n    }\n\n  }\n\n  CloudinaryModule.ɵfac = function CloudinaryModule_Factory(t) {\n    return new (t || CloudinaryModule)();\n  };\n\n  CloudinaryModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: CloudinaryModule\n  });\n  CloudinaryModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return CloudinaryModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CloudinaryModule, {\n    declarations: function () {\n      return [CloudinaryImageSourceDirective, CloudinaryBackgroundImageDirective, CloudinaryImage, CloudinaryVideo, CloudinaryTransformationDirective, LazyLoadDirective, CloudinaryPlaceHolder];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [CloudinaryImageSourceDirective, CloudinaryBackgroundImageDirective, CloudinaryImage, CloudinaryVideo, CloudinaryTransformationDirective, LazyLoadDirective, CloudinaryPlaceHolder];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { CLOUDINARY_CONFIGURATION, CLOUDINARY_LIB, Cloudinary, CloudinaryBackgroundImageDirective, CloudinaryImage, CloudinaryImageSourceDirective, CloudinaryModule, CloudinaryPlaceHolder, CloudinaryTransformationDirective, CloudinaryVideo, LazyLoadDirective, createCloudinary, isBrowser, isJsonLikeString, isNamedNodeMap, namedNodeMapToObject, provideCloudinary, transformKeyNames }; //# sourceMappingURL=cloudinary-angular-5.x.js.map","map":null,"metadata":{},"sourceType":"module"}